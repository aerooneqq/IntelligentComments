namespace ReSharperPlugin.IntelligentComments.Tests.data.CSharp.Highlightings;

|/// <summary>
/// Every class and member should have a one sentence
/// summary describing its purpose.
/// </summary>
/// <remarks>
/// You can expand on that one sentence summary to
/// provide more information for readers. In this case, 
/// the <c>ExampleClass</c> provides different C#
/// elements to show how you would add documentation
///comments for most elements in a typical class.
/// <para>
/// The remarks can add multiple paragraphs, so you can
/// write detailed information for developers that use
/// your work. You should add everything needed for
/// readers to be successful. This class contains
/// examples for the following:
/// </para>
/// <list type="table">
/// <item>
/// <term>Summary</term>
/// <description>
/// This should provide a one sentence summary of the class or member.
/// </description>
/// </item>
/// <item>
/// <term>Remarks</term>
/// <description>
/// This is typically a more detailed description of the class or member
/// </description>
/// </item>
/// <item>
/// <term>para</term>
/// <description>
/// The para tag separates a section into multiple paragraphs
/// </description>
/// </item>
/// <item>
/// <term>list</term>
/// <description>
/// Provides a list of terms or elements
/// </description>
/// </item>
/// <item>
/// <term>returns, param</term>
/// <description>
/// Used to describe parameters and return values
/// </description>
/// </item>
/// <item>
/// <term>value</term>
/// <description>Used to describe properties</description>
/// </item>
/// <item>
/// <term>exception</term>
/// <description>
/// Used to describe exceptions that may be thrown
/// </description>
/// </item>
/// <item>
/// <term>c, cref, see, seealso</term>
/// <description>
/// These provide code style and links to other
/// documentation elements
/// </description>
/// </item>
/// <item>
/// <term>example, code</term>
/// <description>
/// These are used for code examples
/// </description>
/// </item>
/// </list>
/// <para>
/// The list above uses the "table" style. You could
/// also use the "bullet" or "number" style. Neither
/// would typically use the "term" element.
/// <br/>
/// Note: paragraphs are double spaced. Use the *br* 
/// tag for single spaced lines.
/// </para>
/// </remarks>|(0)
public class ExampleClass
{
  |/// <value>
  /// The <c>Label</c> property represents a label
  /// for this instance.
  /// </value>
  /// <remarks>
  /// The <see cref="Label"/> is a <see langword="string"/>
  /// that you use for a label.
  /// <para>
  /// Note that there isn't a way to provide a "cref" to
  /// each accessor, only to the property itself.
  /// </para>
  /// </remarks>|(1)
  public string? Label { get; set; }

  |/// <summary>
  /// Adds two integers and returns the result.
  /// </summary>
  /// <returns>
  /// The sum of two integers.
  /// </returns>
  /// <param name="left">
  /// The left operand of the addition.
  /// </param>
  /// <param name="right">
  /// The right operand of the addition.
  /// </param>
  /// <example>
  /// <code>
  /// int c = Math.Add(4, 5);
  /// if (c > 10)
  /// {
  ///     Console.WriteLine(c);
  /// }
  /// </code>
  /// </example>
  /// <exception cref="System.OverflowException">
  /// Thrown when one parameter is 
  /// <see cref="Int32.MaxValue">MaxValue</see> and the other is
  /// greater than 0.
  /// Note that here you can also use 
  /// <see href="https://docs.microsoft.com/dotnet/api/system.int32.maxvalue"/>
  ///  to point a web page instead.
  /// </exception>
  /// <see cref="ExampleClass"/> for a list of all
  /// the tags in these examples.
  /// <seealso cref="ExampleClass.Label"/>|(2)
  public static int Add(int left, int right)
  {
    if ((left == int.MaxValue && right > 0) || (right == int.MaxValue && left > 0))
      throw new System.OverflowException();

    return left + right;
  }
}

|/// <summary>
/// This is an example of a positional record.
/// </summary>
/// <remarks>
/// There isn't a way to add XML comments for properties
/// created for positional records, yet. The language
/// design team is still considering what tags should
/// be supported, and where. Currently, you can use
/// the "param" tag to describe the parameters to the
/// primary constructor.
/// </remarks>
/// <param name="FirstName">
/// This tag will apply to the primary constructor parameter.
/// </param>
/// <param name="LastName">
/// This tag will apply to the primary constructor parameter.
/// </param>|(3)
public record Person(string FirstName, string LastName);
---------------------------------------------------------
(0): IntelligentCommentsDocCommentFolding: (DocumentRange (82 - 2,412) on 1.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Every class and member should have a one sentence
              summary describing its purpose.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 81, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      RemarksContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: You can expand on that one sentence summary to
              provide more information for readers. In this case,
              the ExampleClass provides different C#
              elements to show how you would add documentation
              comments for most elements in a typical class.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 102, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [doc.comment.c.element.text, 103, 115, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 116, 233, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            ParagraphContentSegment:
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: The remarks can add multiple paragraphs, so you can
                    write detailed information for developers that use
                    your work. You should add everything needed for
                    readers to be successful. This class contains
                    examples for the following:
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 224, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
          Header:
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Summary
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 7, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: This should provide a one sentence summary of the class or member.
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 66, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Remarks
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 7, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: This is typically a more detailed description of the class or member
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 68, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: para
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 4, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: The para tag separates a section into multiple paragraphs
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 57, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: list
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 4, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Provides a list of terms or elements
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 36, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: returns, param
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 14, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Used to describe parameters and return values
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 45, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: value
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 5, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Used to describe properties
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 27, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: exception
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 9, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Used to describe exceptions that may be thrown
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 46, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: c, cref, see, seealso
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: These provide code style and links to other
                    documentation elements
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 66, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: example, code
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            Cell with properties: TableCellProperties: [Center, Center, False]
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: These are used for code examples
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 32, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            ParagraphContentSegment:
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: The list above uses the "table" style. You could
                    also use the "bullet" or "number" style. Neither
                    would typically use the "term" element. Note: paragraphs are double spaced. Use the *br*
                    tag for single spaced lines.
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 137, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                    Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 138, 215, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(1): IntelligentCommentsDocCommentFolding: (DocumentRange (2,446 - 2,818) on 1.cs)
IntelligentCommentContent:
  ContentSegments:
      ValueSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The Label property represents a label
              for this instance.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [doc.comment.c.element.text, 4, 9, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 10, 56, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      RemarksContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The Label is a stringthat you use for a label.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PROPERTY_IDENTIFIER, 4, 9, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::P:ReSharperPlugin.IntelligentComments.Tests.data.CSharp.Highlightings.ExampleClass.Label, ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 10, 14, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [see.langword, 15, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 21, 46, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            ParagraphContentSegment:
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: Note that there isn't a way to provide a "cref" to
                    each accessor, only to the property itself.
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 94, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(2): IntelligentCommentsDocCommentFolding: (DocumentRange (2,862 - 3,830) on 1.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Adds two integers and returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 41, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The sum of two integers.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The left operand of the addition.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 33, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The right operand of the addition.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 34, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  int c = Math.Add(4, 5);
                  if (c > 10)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 22, 23, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 25, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 32, 34, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 40, 42, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      Exception:HighlightedText:
        Text: OverflowException
        Highlighters: Highlighter: [ReSharper.CSHARP_CLASS_IDENTIFIER, 0, 17, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::T:System.OverflowException, ]
        ExceptionContentSegment:
          ContentSegments:
            TextContentSegment:
              HighlightedText:
              Text: Thrown when one parameter is MaxValue and the other is
                greater than 0.
                Note that here you can also use //docs.microsoft.com/dotnet/api/system.int32.maxvalueto point a web page instead.
              Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [see.text, 29, 37, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 38, 102, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [see.http, 103, 156, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 156, 184, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: ExampleClass 
        Highlighters: Highlighter: [ReSharper.CSHARP_CLASS_IDENTIFIER, 0, 12, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::T:ReSharperPlugin.IntelligentComments.Tests.data.CSharp.Highlightings.ExampleClass, ]
        Proxy reference with real id: 981149140
    TextContentSegment:
      HighlightedText:
      Text: for a list of all
        the tags in these examples.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 45, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Label 
        Highlighters: Highlighter: [ReSharper.CSHARP_PROPERTY_IDENTIFIER, 0, 5, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::P:ReSharperPlugin.IntelligentComments.Tests.data.CSharp.Highlightings.ExampleClass.Label, ]
        Proxy reference with real id: 2086100930

(3): IntelligentCommentsDocCommentFolding: (DocumentRange (4,051 - 4,674) on 1.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: This is an example of a positional record.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 42, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      RemarksContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: There isn't a way to add XML comments for properties
              created for positional records, yet. The language
              design team is still considering what tags should
              be supported, and where. Currently, you can use
              the "param" tag to describe the parameters to the
              primary constructor.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 271, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: This tag will apply to the primary constructor parameter.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 57, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: This tag will apply to the primary constructor parameter.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 57, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

