//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:11</p>
  /// </summary>
  public class RdCommentsModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IRdEndpoint<RdCodeHighlightingRequest, RdHighlightedText> HighlightCode => _HighlightCode;
    [NotNull] public IRdEndpoint<RdCommentClickDocRequest, int?> RequestClickDoc => _RequestClickDoc;
    [NotNull] public IRdEndpoint<RdNavigationRequest, Unit> PerformNavigation => _PerformNavigation;
    [NotNull] public IRdEndpoint<int, bool> Evaluate => _Evaluate;
    
    //private fields
    [NotNull] private readonly RdCall<RdCodeHighlightingRequest, RdHighlightedText> _HighlightCode;
    [NotNull] private readonly RdCall<RdCommentClickDocRequest, int?> _RequestClickDoc;
    [NotNull] private readonly RdCall<RdNavigationRequest, Unit> _PerformNavigation;
    [NotNull] private readonly RdCall<int, bool> _Evaluate;
    
    //primary constructor
    private RdCommentsModel(
      [NotNull] RdCall<RdCodeHighlightingRequest, RdHighlightedText> highlightCode,
      [NotNull] RdCall<RdCommentClickDocRequest, int?> requestClickDoc,
      [NotNull] RdCall<RdNavigationRequest, Unit> performNavigation,
      [NotNull] RdCall<int, bool> evaluate
    )
    {
      if (highlightCode == null) throw new ArgumentNullException("highlightCode");
      if (requestClickDoc == null) throw new ArgumentNullException("requestClickDoc");
      if (performNavigation == null) throw new ArgumentNullException("performNavigation");
      if (evaluate == null) throw new ArgumentNullException("evaluate");
      
      _HighlightCode = highlightCode;
      _RequestClickDoc = requestClickDoc;
      _PerformNavigation = performNavigation;
      _Evaluate = evaluate;
      _HighlightCode.ValueCanBeNull = true;
      _RequestClickDoc.ValueCanBeNull = true;
      BindableChildren.Add(new KeyValuePair<string, object>("highlightCode", _HighlightCode));
      BindableChildren.Add(new KeyValuePair<string, object>("requestClickDoc", _RequestClickDoc));
      BindableChildren.Add(new KeyValuePair<string, object>("performNavigation", _PerformNavigation));
      BindableChildren.Add(new KeyValuePair<string, object>("evaluate", _Evaluate));
    }
    //secondary constructor
    internal RdCommentsModel (
    ) : this (
      new RdCall<RdCodeHighlightingRequest, RdHighlightedText>(RdCodeHighlightingRequest.Read, RdCodeHighlightingRequest.Write, ReadRdHighlightedTextNullable, WriteRdHighlightedTextNullable),
      new RdCall<RdCommentClickDocRequest, int?>(RdCommentClickDocRequest.Read, RdCommentClickDocRequest.Write, ReadIntNullable, WriteIntNullable),
      new RdCall<RdNavigationRequest, Unit>(RdNavigationRequest.Read, RdNavigationRequest.Write, JetBrains.Rd.Impl.Serializers.ReadVoid, JetBrains.Rd.Impl.Serializers.WriteVoid),
      new RdCall<int, bool>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdHighlightedText> ReadRdHighlightedTextNullable = RdHighlightedText.Read.NullableClass();
    public static CtxReadDelegate<int?> ReadIntNullable = JetBrains.Rd.Impl.Serializers.ReadInt.NullableStruct();
    
    public static  CtxWriteDelegate<RdHighlightedText> WriteRdHighlightedTextNullable = RdHighlightedText.Write.NullableClass();
    public static  CtxWriteDelegate<int?> WriteIntNullable = JetBrains.Rd.Impl.Serializers.WriteInt.NullableStruct();
    
    protected override long SerializationHash => -8810125033595522805L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(RdCommentFoldingModel.Read, RdCommentFoldingModel.Write);
      serializers.Register(RdGroupOfLineComments.Read, RdGroupOfLineComments.Write);
      serializers.Register(RdDocComment.Read, RdDocComment.Write);
      serializers.Register(RdIntelligentComment.Read, RdIntelligentComment.Write);
      serializers.Register(RdIntelligentCommentContent.Read, RdIntelligentCommentContent.Write);
      serializers.Register(RdParam.Read, RdParam.Write);
      serializers.Register(RdTypeParam.Read, RdTypeParam.Write);
      serializers.Register(RdSummarySegment.Read, RdSummarySegment.Write);
      serializers.Register(RdRemarksSegment.Read, RdRemarksSegment.Write);
      serializers.Register(RdParagraphSegment.Read, RdParagraphSegment.Write);
      serializers.Register(RdReturnSegment.Read, RdReturnSegment.Write);
      serializers.Register(RdExampleSegment.Read, RdExampleSegment.Write);
      serializers.Register(RdValueSegment.Read, RdValueSegment.Write);
      serializers.Register(RdCodeContentSegment.Read, RdCodeContentSegment.Write);
      serializers.Register(RdSeeAlsoMemberContentSegment.Read, RdSeeAlsoMemberContentSegment.Write);
      serializers.Register(RdSeeAlsoLinkContentSegment.Read, RdSeeAlsoLinkContentSegment.Write);
      serializers.Register(RdExceptionsSegment.Read, RdExceptionsSegment.Write);
      serializers.Register(RdTextSegment.Read, RdTextSegment.Write);
      serializers.Register(RdFileBasedImageSegment.Read, RdFileBasedImageSegment.Write);
      serializers.Register(RdListSegment.Read, RdListSegment.Write);
      serializers.Register(RdTableSegment.Read, RdTableSegment.Write);
      serializers.Register(RdTextInvariant.Read, RdTextInvariant.Write);
      serializers.Register(RdProxyReference.Read, RdProxyReference.Write);
      serializers.Register(RdHttpLinkReference.Read, RdHttpLinkReference.Write);
      serializers.Register(RdXmlDocCodeEntityReference.Read, RdXmlDocCodeEntityReference.Write);
      serializers.Register(RdSandboxCodeEntityReference.Read, RdSandboxCodeEntityReference.Write);
      serializers.Register(RdLangWordReference.Read, RdLangWordReference.Write);
      serializers.Register(RdUnderlineTextAnimation.Read, RdUnderlineTextAnimation.Write);
      serializers.Register(RdForegroundColorAnimation.Read, RdForegroundColorAnimation.Write);
      serializers.Register(RdPredefinedForegroundColorAnimation.Read, RdPredefinedForegroundColorAnimation.Write);
      serializers.Register(RdToDoWithTickets.Read, RdToDoWithTickets.Write);
      serializers.Register(RdHackWithTickets.Read, RdHackWithTickets.Write);
      serializers.Register(RdComment_Unknown.Read, RdComment_Unknown.Write);
      serializers.Register(RdContentSegment_Unknown.Read, RdContentSegment_Unknown.Write);
      serializers.Register(RdSegmentWithContent_Unknown.Read, RdSegmentWithContent_Unknown.Write);
      serializers.Register(RdParam_Unknown.Read, RdParam_Unknown.Write);
      serializers.Register(RdSeeAlsoContentSegment_Unknown.Read, RdSeeAlsoContentSegment_Unknown.Write);
      serializers.Register(RdImageSegment_Unknown.Read, RdImageSegment_Unknown.Write);
      serializers.Register(RdInvariant_Unknown.Read, RdInvariant_Unknown.Write);
      serializers.Register(RdReference_Unknown.Read, RdReference_Unknown.Write);
      serializers.Register(RdExternalReference_Unknown.Read, RdExternalReference_Unknown.Write);
      serializers.Register(RdCodeEntityReference_Unknown.Read, RdCodeEntityReference_Unknown.Write);
      serializers.Register(RdTextAnimation_Unknown.Read, RdTextAnimation_Unknown.Write);
      serializers.Register(RdToDo_Unknown.Read, RdToDo_Unknown.Write);
      serializers.Register(RdHack_Unknown.Read, RdHack_Unknown.Write);
      serializers.Register(JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties.Read, JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties.Write);
      
      serializers.RegisterToplevelOnce(typeof(IdeRoot), IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdCommentsModel (");
      using (printer.IndentCookie()) {
        printer.Print("highlightCode = "); _HighlightCode.PrintEx(printer); printer.Println();
        printer.Print("requestClickDoc = "); _RequestClickDoc.PrintEx(printer); printer.Println();
        printer.Print("performNavigation = "); _PerformNavigation.PrintEx(printer); printer.Println();
        printer.Print("evaluate = "); _Evaluate.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionRdCommentsModelEx
   {
    public static RdCommentsModel GetRdCommentsModel(this Solution solution)
    {
      return solution.GetOrCreateExtension("rdCommentsModel", () => new RdCommentsModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:115</p>
  /// </summary>
  public enum ListKind {
    Bullet,
    Number
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:216</p>
  /// </summary>
  public sealed class RdBackgroundStyle : IPrintable, IEquatable<RdBackgroundStyle>
  {
    //fields
    //public fields
    [NotNull] public RdColor BackgroundColor {get; private set;}
    public bool RoundedRect {get; private set;}
    public int LeftRightMargin {get; private set;}
    
    //private fields
    //primary constructor
    public RdBackgroundStyle(
      [NotNull] RdColor backgroundColor,
      bool roundedRect,
      int leftRightMargin
    )
    {
      if (backgroundColor == null) throw new ArgumentNullException("backgroundColor");
      
      BackgroundColor = backgroundColor;
      RoundedRect = roundedRect;
      LeftRightMargin = leftRightMargin;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out RdColor backgroundColor, out bool roundedRect, out int leftRightMargin)
    {
      backgroundColor = BackgroundColor;
      roundedRect = RoundedRect;
      leftRightMargin = LeftRightMargin;
    }
    //statics
    
    public static CtxReadDelegate<RdBackgroundStyle> Read = (ctx, reader) => 
    {
      var backgroundColor = RdColor.Read(ctx, reader);
      var roundedRect = reader.ReadBool();
      var leftRightMargin = reader.ReadInt();
      var _result = new RdBackgroundStyle(backgroundColor, roundedRect, leftRightMargin);
      return _result;
    };
    
    public static CtxWriteDelegate<RdBackgroundStyle> Write = (ctx, writer, value) => 
    {
      RdColor.Write(ctx, writer, value.BackgroundColor);
      writer.Write(value.RoundedRect);
      writer.Write(value.LeftRightMargin);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdBackgroundStyle) obj);
    }
    public bool Equals(RdBackgroundStyle other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(BackgroundColor, other.BackgroundColor) && RoundedRect == other.RoundedRect && LeftRightMargin == other.LeftRightMargin;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + BackgroundColor.GetHashCode();
        hash = hash * 31 + RoundedRect.GetHashCode();
        hash = hash * 31 + LeftRightMargin.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdBackgroundStyle (");
      using (printer.IndentCookie()) {
        printer.Print("backgroundColor = "); BackgroundColor.PrintEx(printer); printer.Println();
        printer.Print("roundedRect = "); RoundedRect.PrintEx(printer); printer.Println();
        printer.Print("leftRightMargin = "); LeftRightMargin.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:81</p>
  /// </summary>
  public sealed class RdCodeContentSegment : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Code {get; private set;}
    public int HighlightingRequestId {get; private set;}
    
    //private fields
    //primary constructor
    public RdCodeContentSegment(
      [NotNull] RdHighlightedText code,
      int highlightingRequestId
    )
    {
      if (code == null) throw new ArgumentNullException("code");
      
      Code = code;
      HighlightingRequestId = highlightingRequestId;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdCodeContentSegment> Read = (ctx, reader) => 
    {
      var code = RdHighlightedText.Read(ctx, reader);
      var highlightingRequestId = reader.ReadInt();
      var _result = new RdCodeContentSegment(code, highlightingRequestId);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdCodeContentSegment> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Code);
      writer.Write(value.HighlightingRequestId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCodeContentSegment) obj);
    }
    public bool Equals(RdCodeContentSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Code, other.Code) && HighlightingRequestId == other.HighlightingRequestId;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Code.GetHashCode();
        hash = hash * 31 + HighlightingRequestId.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCodeContentSegment (");
      using (printer.IndentCookie()) {
        printer.Print("code = "); Code.PrintEx(printer); printer.Println();
        printer.Print("highlightingRequestId = "); HighlightingRequestId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:182</p>
  /// </summary>
  public abstract class RdCodeEntityReference : RdReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    protected RdCodeEntityReference(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdCodeEntityReference> Read = Polymorphic<RdCodeEntityReference>.ReadAbstract(RdCodeEntityReference_Unknown.Read);
    
    public static new CtxWriteDelegate<RdCodeEntityReference> Write = Polymorphic<RdCodeEntityReference>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdCodeEntityReference_Unknown : RdCodeEntityReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdCodeEntityReference_Unknown(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdCodeEntityReference_Unknown> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var _result = new RdCodeEntityReference_Unknown(rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdCodeEntityReference_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCodeEntityReference_Unknown) obj);
    }
    public bool Equals(RdCodeEntityReference_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCodeEntityReference_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:268</p>
  /// </summary>
  public sealed class RdCodeHighlightingRequest : IPrintable, IEquatable<RdCodeHighlightingRequest>
  {
    //fields
    //public fields
    public int Id {get; private set;}
    
    //private fields
    //primary constructor
    public RdCodeHighlightingRequest(
      int id
    )
    {
      Id = id;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out int id)
    {
      id = Id;
    }
    //statics
    
    public static CtxReadDelegate<RdCodeHighlightingRequest> Read = (ctx, reader) => 
    {
      var id = reader.ReadInt();
      var _result = new RdCodeHighlightingRequest(id);
      return _result;
    };
    
    public static CtxWriteDelegate<RdCodeHighlightingRequest> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Id);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCodeHighlightingRequest) obj);
    }
    public bool Equals(RdCodeHighlightingRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Id == other.Id;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Id.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCodeHighlightingRequest (");
      using (printer.IndentCookie()) {
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:222</p>
  /// </summary>
  public sealed class RdColor : IPrintable, IEquatable<RdColor>
  {
    //fields
    //public fields
    [NotNull] public string Hex {get; private set;}
    
    //private fields
    //primary constructor
    public RdColor(
      [NotNull] string hex
    )
    {
      if (hex == null) throw new ArgumentNullException("hex");
      
      Hex = hex;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string hex)
    {
      hex = Hex;
    }
    //statics
    
    public static CtxReadDelegate<RdColor> Read = (ctx, reader) => 
    {
      var hex = reader.ReadString();
      var _result = new RdColor(hex);
      return _result;
    };
    
    public static CtxWriteDelegate<RdColor> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Hex);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdColor) obj);
    }
    public bool Equals(RdColor other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Hex == other.Hex;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Hex.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdColor (");
      using (printer.IndentCookie()) {
        printer.Print("hex = "); Hex.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:21</p>
  /// </summary>
  public abstract class RdComment{
    //fields
    //public fields
    public int CommentIdentifier {get; private set;}
    [NotNull] public RdTextRange Range {get; private set;}
    
    //private fields
    //primary constructor
    protected RdComment(
      int commentIdentifier,
      [NotNull] RdTextRange range
    )
    {
      if (range == null) throw new ArgumentNullException("range");
      
      CommentIdentifier = commentIdentifier;
      Range = range;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdComment> Read = Polymorphic<RdComment>.ReadAbstract(RdComment_Unknown.Read);
    
    public static CtxWriteDelegate<RdComment> Write = Polymorphic<RdComment>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:272</p>
  /// </summary>
  public sealed class RdCommentClickDocRequest : IPrintable, IEquatable<RdCommentClickDocRequest>
  {
    //fields
    //public fields
    [NotNull] public RdReference Reference {get; private set;}
    [NotNull] public JetBrains.Rider.Model.TextControlId TextControlId {get; private set;}
    
    //private fields
    //primary constructor
    public RdCommentClickDocRequest(
      [NotNull] RdReference reference,
      [NotNull] JetBrains.Rider.Model.TextControlId textControlId
    )
    {
      if (reference == null) throw new ArgumentNullException("reference");
      if (textControlId == null) throw new ArgumentNullException("textControlId");
      
      Reference = reference;
      TextControlId = textControlId;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out RdReference reference, [NotNull] out JetBrains.Rider.Model.TextControlId textControlId)
    {
      reference = Reference;
      textControlId = TextControlId;
    }
    //statics
    
    public static CtxReadDelegate<RdCommentClickDocRequest> Read = (ctx, reader) => 
    {
      var reference = RdReference.Read(ctx, reader);
      var textControlId = JetBrains.Rider.Model.TextControlId.Read(ctx, reader);
      var _result = new RdCommentClickDocRequest(reference, textControlId);
      return _result;
    };
    
    public static CtxWriteDelegate<RdCommentClickDocRequest> Write = (ctx, writer, value) => 
    {
      RdReference.Write(ctx, writer, value.Reference);
      JetBrains.Rider.Model.TextControlId.Write(ctx, writer, value.TextControlId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCommentClickDocRequest) obj);
    }
    public bool Equals(RdCommentClickDocRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Reference, other.Reference) && Equals(TextControlId, other.TextControlId);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Reference.GetHashCode();
        hash = hash * 31 + TextControlId.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCommentClickDocRequest (");
      using (printer.IndentCookie()) {
        printer.Print("reference = "); Reference.PrintEx(printer); printer.Println();
        printer.Print("textControlId = "); TextControlId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:12</p>
  /// </summary>
  public sealed class RdCommentFoldingModel : HighlighterModel
  {
    //fields
    //public fields
    public int CommentIdentifier {get; private set;}
    [NotNull] public RdComment Comment {get; private set;}
    
    //private fields
    //primary constructor
    public RdCommentFoldingModel(
      int commentIdentifier,
      [NotNull] RdComment comment,
      int layer,
      bool isExactRange,
      [NotNull] AbstractDocumentVersion documentVersion,
      bool isGreedyToLeft,
      bool isGreedyToRight,
      bool isThinErrorStripeMark,
      [CanBeNull] string textToHighlight,
      [CanBeNull] JetBrains.Rider.Model.HighlighterRegistration.TextAttributesKeyModel textAttributesKey,
      long id,
      [NotNull] JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties properties,
      int start,
      int end
    ) : base (
      layer,
      isExactRange,
      documentVersion,
      isGreedyToLeft,
      isGreedyToRight,
      isThinErrorStripeMark,
      textToHighlight,
      textAttributesKey,
      id,
      properties,
      start,
      end
     ) 
    {
      if (comment == null) throw new ArgumentNullException("comment");
      
      CommentIdentifier = commentIdentifier;
      Comment = comment;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdCommentFoldingModel> Read = (ctx, reader) => 
    {
      var layer = reader.ReadInt();
      var isExactRange = reader.ReadBool();
      var documentVersion = AbstractDocumentVersion.Read(ctx, reader);
      var isGreedyToLeft = reader.ReadBool();
      var isGreedyToRight = reader.ReadBool();
      var isThinErrorStripeMark = reader.ReadBool();
      var textToHighlight = ReadStringNullable(ctx, reader);
      var textAttributesKey = ReadTextAttributesKeyModelInternedNullable(ctx, reader);
      var id = reader.ReadLong();
      var properties = ctx.ReadInterned(reader, "Protocol", JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties.Read);
      var start = reader.ReadInt();
      var end = reader.ReadInt();
      var commentIdentifier = reader.ReadInt();
      var comment = RdComment.Read(ctx, reader);
      var _result = new RdCommentFoldingModel(commentIdentifier, comment, layer, isExactRange, documentVersion, isGreedyToLeft, isGreedyToRight, isThinErrorStripeMark, textToHighlight, textAttributesKey, id, properties, start, end);
      return _result;
    };
    public static CtxReadDelegate<string> ReadStringNullable = JetBrains.Rd.Impl.Serializers.ReadString.NullableClass();
    public static CtxReadDelegate<JetBrains.Rider.Model.HighlighterRegistration.TextAttributesKeyModel> ReadTextAttributesKeyModelInternedNullable = JetBrains.Rider.Model.HighlighterRegistration.TextAttributesKeyModel.Read.Interned("Protocol").NullableClass();
    public static CtxReadDelegate<JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties> ReadHighlighterPropertiesInternedAtProtocol = JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties.Read.Interned("Protocol");
    
    public static new CtxWriteDelegate<RdCommentFoldingModel> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Layer);
      writer.Write(value.IsExactRange);
      AbstractDocumentVersion.Write(ctx, writer, value.DocumentVersion);
      writer.Write(value.IsGreedyToLeft);
      writer.Write(value.IsGreedyToRight);
      writer.Write(value.IsThinErrorStripeMark);
      WriteStringNullable(ctx, writer, value.TextToHighlight);
      WriteTextAttributesKeyModelInternedNullable(ctx, writer, value.TextAttributesKey);
      writer.Write(value.Id);
      ctx.WriteInterned(writer, value.Properties, "Protocol", JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties.Write);
      writer.Write(value.Start);
      writer.Write(value.End);
      writer.Write(value.CommentIdentifier);
      RdComment.Write(ctx, writer, value.Comment);
    };
    public static  CtxWriteDelegate<string> WriteStringNullable = JetBrains.Rd.Impl.Serializers.WriteString.NullableClass();
    public static  CtxWriteDelegate<JetBrains.Rider.Model.HighlighterRegistration.TextAttributesKeyModel> WriteTextAttributesKeyModelInternedNullable = JetBrains.Rider.Model.HighlighterRegistration.TextAttributesKeyModel.Write.Interned("Protocol").NullableClass();
    public static  CtxWriteDelegate<JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties> WriteHighlighterPropertiesInternedAtProtocol = JetBrains.Rider.Model.HighlighterRegistration.HighlighterProperties.Write.Interned("Protocol");
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdCommentFoldingModel) obj);
    }
    public bool Equals(RdCommentFoldingModel other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return CommentIdentifier == other.CommentIdentifier && Equals(Comment, other.Comment) && Layer == other.Layer && IsExactRange == other.IsExactRange && Equals(DocumentVersion, other.DocumentVersion) && IsGreedyToLeft == other.IsGreedyToLeft && IsGreedyToRight == other.IsGreedyToRight && IsThinErrorStripeMark == other.IsThinErrorStripeMark && Equals(TextToHighlight, other.TextToHighlight) && Equals(TextAttributesKey, other.TextAttributesKey) && Id == other.Id && Equals(Properties, other.Properties) && Start == other.Start && End == other.End;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + CommentIdentifier.GetHashCode();
        hash = hash * 31 + Comment.GetHashCode();
        hash = hash * 31 + Layer.GetHashCode();
        hash = hash * 31 + IsExactRange.GetHashCode();
        hash = hash * 31 + DocumentVersion.GetHashCode();
        hash = hash * 31 + IsGreedyToLeft.GetHashCode();
        hash = hash * 31 + IsGreedyToRight.GetHashCode();
        hash = hash * 31 + IsThinErrorStripeMark.GetHashCode();
        hash = hash * 31 + (TextToHighlight != null ? TextToHighlight.GetHashCode() : 0);
        hash = hash * 31 + (TextAttributesKey != null ? TextAttributesKey.GetHashCode() : 0);
        hash = hash * 31 + Id.GetHashCode();
        hash = hash * 31 + Properties.GetHashCode();
        hash = hash * 31 + Start.GetHashCode();
        hash = hash * 31 + End.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdCommentFoldingModel (");
      using (printer.IndentCookie()) {
        printer.Print("commentIdentifier = "); CommentIdentifier.PrintEx(printer); printer.Println();
        printer.Print("comment = "); Comment.PrintEx(printer); printer.Println();
        printer.Print("layer = "); Layer.PrintEx(printer); printer.Println();
        printer.Print("isExactRange = "); IsExactRange.PrintEx(printer); printer.Println();
        printer.Print("documentVersion = "); DocumentVersion.PrintEx(printer); printer.Println();
        printer.Print("isGreedyToLeft = "); IsGreedyToLeft.PrintEx(printer); printer.Println();
        printer.Print("isGreedyToRight = "); IsGreedyToRight.PrintEx(printer); printer.Println();
        printer.Print("isThinErrorStripeMark = "); IsThinErrorStripeMark.PrintEx(printer); printer.Println();
        printer.Print("textToHighlight = "); TextToHighlight.PrintEx(printer); printer.Println();
        printer.Print("textAttributesKey = "); TextAttributesKey.PrintEx(printer); printer.Println();
        printer.Print("id = "); Id.PrintEx(printer); printer.Println();
        printer.Print("properties = "); Properties.PrintEx(printer); printer.Println();
        printer.Print("start = "); Start.PrintEx(printer); printer.Println();
        printer.Print("end = "); End.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  public sealed class RdComment_Unknown : RdComment
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdComment_Unknown(
      int commentIdentifier,
      [NotNull] RdTextRange range
    ) : base (
      commentIdentifier,
      range
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdComment_Unknown> Read = (ctx, reader) => 
    {
      var commentIdentifier = reader.ReadInt();
      var range = RdTextRange.Read(ctx, reader);
      var _result = new RdComment_Unknown(commentIdentifier, range);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdComment_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.CommentIdentifier);
      RdTextRange.Write(ctx, writer, value.Range);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdComment_Unknown) obj);
    }
    public bool Equals(RdComment_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return CommentIdentifier == other.CommentIdentifier && Equals(Range, other.Range);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + CommentIdentifier.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdComment_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("commentIdentifier = "); CommentIdentifier.PrintEx(printer); printer.Println();
        printer.Print("range = "); Range.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:50</p>
  /// </summary>
  public abstract class RdContentSegment{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdContentSegment> Read = Polymorphic<RdContentSegment>.ReadAbstract(RdContentSegment_Unknown.Read);
    
    public static CtxWriteDelegate<RdContentSegment> Write = Polymorphic<RdContentSegment>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdContentSegment_Unknown : RdContentSegment
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdContentSegment_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdContentSegment_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdContentSegment_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdContentSegment_Unknown) obj);
    }
    public bool Equals(RdContentSegment_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdContentSegment_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:59</p>
  /// </summary>
  public sealed class RdContentSegments : IPrintable, IEquatable<RdContentSegments>
  {
    //fields
    //public fields
    [NotNull] public List<RdContentSegment> Content {get; private set;}
    
    //private fields
    //primary constructor
    public RdContentSegments(
      [NotNull] List<RdContentSegment> content
    )
    {
      if (content == null) throw new ArgumentNullException("content");
      
      Content = content;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<RdContentSegment> content)
    {
      content = Content;
    }
    //statics
    
    public static CtxReadDelegate<RdContentSegments> Read = (ctx, reader) => 
    {
      var content = ReadRdContentSegmentList(ctx, reader);
      var _result = new RdContentSegments(content);
      return _result;
    };
    public static CtxReadDelegate<List<RdContentSegment>> ReadRdContentSegmentList = RdContentSegment.Read.List();
    
    public static CtxWriteDelegate<RdContentSegments> Write = (ctx, writer, value) => 
    {
      WriteRdContentSegmentList(ctx, writer, value.Content);
    };
    public static  CtxWriteDelegate<List<RdContentSegment>> WriteRdContentSegmentList = RdContentSegment.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdContentSegments) obj);
    }
    public bool Equals(RdContentSegments other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Content.SequenceEqual(other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdContentSegments (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:30</p>
  /// </summary>
  public sealed class RdDocComment : RdComment
  {
    //fields
    //public fields
    [CanBeNull] public RdIntelligentCommentContent Content {get; private set;}
    
    //private fields
    //primary constructor
    public RdDocComment(
      [CanBeNull] RdIntelligentCommentContent content,
      int commentIdentifier,
      [NotNull] RdTextRange range
    ) : base (
      commentIdentifier,
      range
     ) 
    {
      Content = content;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdDocComment> Read = (ctx, reader) => 
    {
      var commentIdentifier = reader.ReadInt();
      var range = RdTextRange.Read(ctx, reader);
      var content = ReadRdIntelligentCommentContentNullable(ctx, reader);
      var _result = new RdDocComment(content, commentIdentifier, range);
      return _result;
    };
    public static CtxReadDelegate<RdIntelligentCommentContent> ReadRdIntelligentCommentContentNullable = RdIntelligentCommentContent.Read.NullableClass();
    
    public static new CtxWriteDelegate<RdDocComment> Write = (ctx, writer, value) => 
    {
      writer.Write(value.CommentIdentifier);
      RdTextRange.Write(ctx, writer, value.Range);
      WriteRdIntelligentCommentContentNullable(ctx, writer, value.Content);
    };
    public static  CtxWriteDelegate<RdIntelligentCommentContent> WriteRdIntelligentCommentContentNullable = RdIntelligentCommentContent.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdDocComment) obj);
    }
    public bool Equals(RdDocComment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content) && CommentIdentifier == other.CommentIdentifier && Equals(Range, other.Range);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (Content != null ? Content.GetHashCode() : 0);
        hash = hash * 31 + CommentIdentifier.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdDocComment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
        printer.Print("commentIdentifier = "); CommentIdentifier.PrintEx(printer); printer.Println();
        printer.Print("range = "); Range.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:17</p>
  /// </summary>
  public sealed class RdDocumentComments : IPrintable, IEquatable<RdDocumentComments>
  {
    //fields
    //public fields
    [NotNull] public List<RdComment> Comments {get; private set;}
    
    //private fields
    //primary constructor
    public RdDocumentComments(
      [NotNull] List<RdComment> comments
    )
    {
      if (comments == null) throw new ArgumentNullException("comments");
      
      Comments = comments;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<RdComment> comments)
    {
      comments = Comments;
    }
    //statics
    
    public static CtxReadDelegate<RdDocumentComments> Read = (ctx, reader) => 
    {
      var comments = ReadRdCommentList(ctx, reader);
      var _result = new RdDocumentComments(comments);
      return _result;
    };
    public static CtxReadDelegate<List<RdComment>> ReadRdCommentList = RdComment.Read.List();
    
    public static CtxWriteDelegate<RdDocumentComments> Write = (ctx, writer, value) => 
    {
      WriteRdCommentList(ctx, writer, value.Comments);
    };
    public static  CtxWriteDelegate<List<RdComment>> WriteRdCommentList = RdComment.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdDocumentComments) obj);
    }
    public bool Equals(RdDocumentComments other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Comments.SequenceEqual(other.Comments);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Comments.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdDocumentComments (");
      using (printer.IndentCookie()) {
        printer.Print("comments = "); Comments.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:77</p>
  /// </summary>
  public sealed class RdExampleSegment : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdExampleSegment(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdExampleSegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdExampleSegment(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdExampleSegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdExampleSegment) obj);
    }
    public bool Equals(RdExampleSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdExampleSegment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:98</p>
  /// </summary>
  public sealed class RdExceptionsSegment : RdSegmentWithContent
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Name {get; private set;}
    [CanBeNull] public RdReference ExceptionReference {get; private set;}
    
    //private fields
    //primary constructor
    public RdExceptionsSegment(
      [NotNull] RdHighlightedText name,
      [CanBeNull] RdReference exceptionReference,
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      ExceptionReference = exceptionReference;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdExceptionsSegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var name = RdHighlightedText.Read(ctx, reader);
      var exceptionReference = ReadRdReferenceNullable(ctx, reader);
      var _result = new RdExceptionsSegment(name, exceptionReference, content);
      return _result;
    };
    public static CtxReadDelegate<RdReference> ReadRdReferenceNullable = RdReference.Read.NullableClass();
    
    public static new CtxWriteDelegate<RdExceptionsSegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
      RdHighlightedText.Write(ctx, writer, value.Name);
      WriteRdReferenceNullable(ctx, writer, value.ExceptionReference);
    };
    public static  CtxWriteDelegate<RdReference> WriteRdReferenceNullable = RdReference.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdExceptionsSegment) obj);
    }
    public bool Equals(RdExceptionsSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Name, other.Name) && Equals(ExceptionReference, other.ExceptionReference) && Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + (ExceptionReference != null ? ExceptionReference.GetHashCode() : 0);
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdExceptionsSegment (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("exceptionReference = "); ExceptionReference.PrintEx(printer); printer.Println();
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:178</p>
  /// </summary>
  public abstract class RdExternalReference : RdReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    protected RdExternalReference(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdExternalReference> Read = Polymorphic<RdExternalReference>.ReadAbstract(RdExternalReference_Unknown.Read);
    
    public static new CtxWriteDelegate<RdExternalReference> Write = Polymorphic<RdExternalReference>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdExternalReference_Unknown : RdExternalReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdExternalReference_Unknown(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdExternalReference_Unknown> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var _result = new RdExternalReference_Unknown(rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdExternalReference_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdExternalReference_Unknown) obj);
    }
    public bool Equals(RdExternalReference_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdExternalReference_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:111</p>
  /// </summary>
  public sealed class RdFileBasedImageSegment : RdImageSegment
  {
    //fields
    //public fields
    [NotNull] public string Path {get; private set;}
    
    //private fields
    //primary constructor
    public RdFileBasedImageSegment(
      [NotNull] string path,
      [NotNull] RdHighlightedText description
    ) : base (
      description
     ) 
    {
      if (path == null) throw new ArgumentNullException("path");
      
      Path = path;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdFileBasedImageSegment> Read = (ctx, reader) => 
    {
      var description = RdHighlightedText.Read(ctx, reader);
      var path = reader.ReadString();
      var _result = new RdFileBasedImageSegment(path, description);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdFileBasedImageSegment> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Description);
      writer.Write(value.Path);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdFileBasedImageSegment) obj);
    }
    public bool Equals(RdFileBasedImageSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Path == other.Path && Equals(Description, other.Description);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Path.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdFileBasedImageSegment (");
      using (printer.IndentCookie()) {
        printer.Print("path = "); Path.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:236</p>
  /// </summary>
  public enum RdFontStyle {
    Regular,
    Bold,
    Italic
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:228</p>
  /// </summary>
  public sealed class RdForegroundColorAnimation : RdTextAnimation
  {
    //fields
    //public fields
    [NotNull] public RdColor HoveredColor {get; private set;}
    
    //private fields
    //primary constructor
    public RdForegroundColorAnimation(
      [NotNull] RdColor hoveredColor
    )
    {
      if (hoveredColor == null) throw new ArgumentNullException("hoveredColor");
      
      HoveredColor = hoveredColor;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdForegroundColorAnimation> Read = (ctx, reader) => 
    {
      var hoveredColor = RdColor.Read(ctx, reader);
      var _result = new RdForegroundColorAnimation(hoveredColor);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdForegroundColorAnimation> Write = (ctx, writer, value) => 
    {
      RdColor.Write(ctx, writer, value.HoveredColor);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdForegroundColorAnimation) obj);
    }
    public bool Equals(RdForegroundColorAnimation other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(HoveredColor, other.HoveredColor);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + HoveredColor.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdForegroundColorAnimation (");
      using (printer.IndentCookie()) {
        printer.Print("hoveredColor = "); HoveredColor.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:26</p>
  /// </summary>
  public sealed class RdGroupOfLineComments : RdComment
  {
    //fields
    //public fields
    [NotNull] public RdTextSegment Text {get; private set;}
    
    //private fields
    //primary constructor
    public RdGroupOfLineComments(
      [NotNull] RdTextSegment text,
      int commentIdentifier,
      [NotNull] RdTextRange range
    ) : base (
      commentIdentifier,
      range
     ) 
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdGroupOfLineComments> Read = (ctx, reader) => 
    {
      var commentIdentifier = reader.ReadInt();
      var range = RdTextRange.Read(ctx, reader);
      var text = RdTextSegment.Read(ctx, reader);
      var _result = new RdGroupOfLineComments(text, commentIdentifier, range);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdGroupOfLineComments> Write = (ctx, writer, value) => 
    {
      writer.Write(value.CommentIdentifier);
      RdTextRange.Write(ctx, writer, value.Range);
      RdTextSegment.Write(ctx, writer, value.Text);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdGroupOfLineComments) obj);
    }
    public bool Equals(RdGroupOfLineComments other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Text, other.Text) && CommentIdentifier == other.CommentIdentifier && Equals(Range, other.Range);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        hash = hash * 31 + CommentIdentifier.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdGroupOfLineComments (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
        printer.Print("commentIdentifier = "); CommentIdentifier.PrintEx(printer); printer.Println();
        printer.Print("range = "); Range.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:258</p>
  /// </summary>
  public abstract class RdHack{
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    [NotNull] public RdContentSegments Description {get; private set;}
    [NotNull] public List<RdReference> BlockingReferences {get; private set;}
    
    //private fields
    //primary constructor
    protected RdHack(
      [NotNull] string name,
      [NotNull] RdContentSegments description,
      [NotNull] List<RdReference> blockingReferences
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      if (description == null) throw new ArgumentNullException("description");
      if (blockingReferences == null) throw new ArgumentNullException("blockingReferences");
      
      Name = name;
      Description = description;
      BlockingReferences = blockingReferences;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdHack> Read = Polymorphic<RdHack>.ReadAbstract(RdHack_Unknown.Read);
    
    public static CtxWriteDelegate<RdHack> Write = Polymorphic<RdHack>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:264</p>
  /// </summary>
  public sealed class RdHackWithTickets : RdHack
  {
    //fields
    //public fields
    [NotNull] public List<RdTicket> Tickets {get; private set;}
    
    //private fields
    //primary constructor
    public RdHackWithTickets(
      [NotNull] List<RdTicket> tickets,
      [NotNull] string name,
      [NotNull] RdContentSegments description,
      [NotNull] List<RdReference> blockingReferences
    ) : base (
      name,
      description,
      blockingReferences
     ) 
    {
      if (tickets == null) throw new ArgumentNullException("tickets");
      
      Tickets = tickets;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdHackWithTickets> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var description = RdContentSegments.Read(ctx, reader);
      var blockingReferences = ReadRdReferenceList(ctx, reader);
      var tickets = ReadRdTicketList(ctx, reader);
      var _result = new RdHackWithTickets(tickets, name, description, blockingReferences);
      return _result;
    };
    public static CtxReadDelegate<List<RdTicket>> ReadRdTicketList = RdTicket.Read.List();
    public static CtxReadDelegate<List<RdReference>> ReadRdReferenceList = RdReference.Read.List();
    
    public static new CtxWriteDelegate<RdHackWithTickets> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      RdContentSegments.Write(ctx, writer, value.Description);
      WriteRdReferenceList(ctx, writer, value.BlockingReferences);
      WriteRdTicketList(ctx, writer, value.Tickets);
    };
    public static  CtxWriteDelegate<List<RdTicket>> WriteRdTicketList = RdTicket.Write.List();
    public static  CtxWriteDelegate<List<RdReference>> WriteRdReferenceList = RdReference.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdHackWithTickets) obj);
    }
    public bool Equals(RdHackWithTickets other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Tickets.SequenceEqual(other.Tickets) && Name == other.Name && Equals(Description, other.Description) && BlockingReferences.SequenceEqual(other.BlockingReferences);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Tickets.ContentHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        hash = hash * 31 + BlockingReferences.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdHackWithTickets (");
      using (printer.IndentCookie()) {
        printer.Print("tickets = "); Tickets.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("blockingReferences = "); BlockingReferences.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  public sealed class RdHack_Unknown : RdHack
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdHack_Unknown(
      [NotNull] string name,
      [NotNull] RdContentSegments description,
      [NotNull] List<RdReference> blockingReferences
    ) : base (
      name,
      description,
      blockingReferences
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdHack_Unknown> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var description = RdContentSegments.Read(ctx, reader);
      var blockingReferences = ReadRdReferenceList(ctx, reader);
      var _result = new RdHack_Unknown(name, description, blockingReferences);
      return _result;
    };
    public static CtxReadDelegate<List<RdReference>> ReadRdReferenceList = RdReference.Read.List();
    
    public static new CtxWriteDelegate<RdHack_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      RdContentSegments.Write(ctx, writer, value.Description);
      WriteRdReferenceList(ctx, writer, value.BlockingReferences);
    };
    public static  CtxWriteDelegate<List<RdReference>> WriteRdReferenceList = RdReference.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdHack_Unknown) obj);
    }
    public bool Equals(RdHack_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Equals(Description, other.Description) && BlockingReferences.SequenceEqual(other.BlockingReferences);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        hash = hash * 31 + BlockingReferences.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdHack_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("blockingReferences = "); BlockingReferences.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:194</p>
  /// </summary>
  public sealed class RdHighlightedText : IPrintable, IEquatable<RdHighlightedText>
  {
    //fields
    //public fields
    [NotNull] public string Text {get; private set;}
    [CanBeNull] public List<RdTextHighlighter> Highlighters {get; private set;}
    
    //private fields
    //primary constructor
    public RdHighlightedText(
      [NotNull] string text,
      [CanBeNull] List<RdTextHighlighter> highlighters = null
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
      Highlighters = highlighters;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string text, [CanBeNull] out List<RdTextHighlighter> highlighters)
    {
      text = Text;
      highlighters = Highlighters;
    }
    //statics
    
    public static CtxReadDelegate<RdHighlightedText> Read = (ctx, reader) => 
    {
      var text = reader.ReadString();
      var highlighters = ReadRdTextHighlighterListNullable(ctx, reader);
      var _result = new RdHighlightedText(text, highlighters);
      return _result;
    };
    public static CtxReadDelegate<List<RdTextHighlighter>> ReadRdTextHighlighterListNullable = RdTextHighlighter.Read.List().NullableClass();
    
    public static CtxWriteDelegate<RdHighlightedText> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Text);
      WriteRdTextHighlighterListNullable(ctx, writer, value.Highlighters);
    };
    public static  CtxWriteDelegate<List<RdTextHighlighter>> WriteRdTextHighlighterListNullable = RdTextHighlighter.Write.List().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdHighlightedText) obj);
    }
    public bool Equals(RdHighlightedText other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Text == other.Text && Equals(Highlighters, other.Highlighters);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        hash = hash * 31 + (Highlighters != null ? Highlighters.ContentHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdHighlightedText (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
        printer.Print("highlighters = "); Highlighters.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:151</p>
  /// </summary>
  public enum RdHorizontalAlignment {
    Center,
    Left,
    Right
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:180</p>
  /// </summary>
  public sealed class RdHttpLinkReference : RdExternalReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdHttpLinkReference(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdHttpLinkReference> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var _result = new RdHttpLinkReference(rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdHttpLinkReference> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdHttpLinkReference) obj);
    }
    public bool Equals(RdHttpLinkReference other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdHttpLinkReference (");
      using (printer.IndentCookie()) {
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:107</p>
  /// </summary>
  public abstract class RdImageSegment : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Description {get; private set;}
    
    //private fields
    //primary constructor
    protected RdImageSegment(
      [NotNull] RdHighlightedText description
    )
    {
      if (description == null) throw new ArgumentNullException("description");
      
      Description = description;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdImageSegment> Read = Polymorphic<RdImageSegment>.ReadAbstract(RdImageSegment_Unknown.Read);
    
    public static new CtxWriteDelegate<RdImageSegment> Write = Polymorphic<RdImageSegment>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdImageSegment_Unknown : RdImageSegment
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdImageSegment_Unknown(
      [NotNull] RdHighlightedText description
    ) : base (
      description
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdImageSegment_Unknown> Read = (ctx, reader) => 
    {
      var description = RdHighlightedText.Read(ctx, reader);
      var _result = new RdImageSegment_Unknown(description);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdImageSegment_Unknown> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Description);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdImageSegment_Unknown) obj);
    }
    public bool Equals(RdImageSegment_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Description, other.Description);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Description.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdImageSegment_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:34</p>
  /// </summary>
  public sealed class RdIntelligentComment : RdComment
  {
    //fields
    //public fields
    [CanBeNull] public List<RdIntelligentCommentAuthor> Authors {get; private set;}
    public DateTime Date {get; private set;}
    [CanBeNull] public RdIntelligentCommentContent Content {get; private set;}
    [CanBeNull] public List<RdInvariant> Invariants {get; private set;}
    [CanBeNull] public List<RdReference> References {get; private set;}
    [CanBeNull] public List<RdToDo> ToDos {get; private set;}
    [CanBeNull] public List<RdHack> Hacks {get; private set;}
    
    //private fields
    //primary constructor
    public RdIntelligentComment(
      [CanBeNull] List<RdIntelligentCommentAuthor> authors,
      DateTime date,
      [CanBeNull] RdIntelligentCommentContent content,
      [CanBeNull] List<RdInvariant> invariants,
      [CanBeNull] List<RdReference> references,
      [CanBeNull] List<RdToDo> toDos,
      [CanBeNull] List<RdHack> hacks,
      int commentIdentifier,
      [NotNull] RdTextRange range
    ) : base (
      commentIdentifier,
      range
     ) 
    {
      Authors = authors;
      Date = date;
      Content = content;
      Invariants = invariants;
      References = references;
      ToDos = toDos;
      Hacks = hacks;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdIntelligentComment> Read = (ctx, reader) => 
    {
      var commentIdentifier = reader.ReadInt();
      var range = RdTextRange.Read(ctx, reader);
      var authors = ReadRdIntelligentCommentAuthorListNullable(ctx, reader);
      var date = reader.ReadDateTime();
      var content = ReadRdIntelligentCommentContentNullable(ctx, reader);
      var invariants = ReadRdInvariantListNullable(ctx, reader);
      var references = ReadRdReferenceListNullable(ctx, reader);
      var toDos = ReadRdToDoListNullable(ctx, reader);
      var hacks = ReadRdHackListNullable(ctx, reader);
      var _result = new RdIntelligentComment(authors, date, content, invariants, references, toDos, hacks, commentIdentifier, range);
      return _result;
    };
    public static CtxReadDelegate<List<RdIntelligentCommentAuthor>> ReadRdIntelligentCommentAuthorListNullable = RdIntelligentCommentAuthor.Read.List().NullableClass();
    public static CtxReadDelegate<RdIntelligentCommentContent> ReadRdIntelligentCommentContentNullable = RdIntelligentCommentContent.Read.NullableClass();
    public static CtxReadDelegate<List<RdInvariant>> ReadRdInvariantListNullable = RdInvariant.Read.List().NullableClass();
    public static CtxReadDelegate<List<RdReference>> ReadRdReferenceListNullable = RdReference.Read.List().NullableClass();
    public static CtxReadDelegate<List<RdToDo>> ReadRdToDoListNullable = RdToDo.Read.List().NullableClass();
    public static CtxReadDelegate<List<RdHack>> ReadRdHackListNullable = RdHack.Read.List().NullableClass();
    
    public static new CtxWriteDelegate<RdIntelligentComment> Write = (ctx, writer, value) => 
    {
      writer.Write(value.CommentIdentifier);
      RdTextRange.Write(ctx, writer, value.Range);
      WriteRdIntelligentCommentAuthorListNullable(ctx, writer, value.Authors);
      writer.Write(value.Date);
      WriteRdIntelligentCommentContentNullable(ctx, writer, value.Content);
      WriteRdInvariantListNullable(ctx, writer, value.Invariants);
      WriteRdReferenceListNullable(ctx, writer, value.References);
      WriteRdToDoListNullable(ctx, writer, value.ToDos);
      WriteRdHackListNullable(ctx, writer, value.Hacks);
    };
    public static  CtxWriteDelegate<List<RdIntelligentCommentAuthor>> WriteRdIntelligentCommentAuthorListNullable = RdIntelligentCommentAuthor.Write.List().NullableClass();
    public static  CtxWriteDelegate<RdIntelligentCommentContent> WriteRdIntelligentCommentContentNullable = RdIntelligentCommentContent.Write.NullableClass();
    public static  CtxWriteDelegate<List<RdInvariant>> WriteRdInvariantListNullable = RdInvariant.Write.List().NullableClass();
    public static  CtxWriteDelegate<List<RdReference>> WriteRdReferenceListNullable = RdReference.Write.List().NullableClass();
    public static  CtxWriteDelegate<List<RdToDo>> WriteRdToDoListNullable = RdToDo.Write.List().NullableClass();
    public static  CtxWriteDelegate<List<RdHack>> WriteRdHackListNullable = RdHack.Write.List().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdIntelligentComment) obj);
    }
    public bool Equals(RdIntelligentComment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Authors, other.Authors) && Date == other.Date && Equals(Content, other.Content) && Equals(Invariants, other.Invariants) && Equals(References, other.References) && Equals(ToDos, other.ToDos) && Equals(Hacks, other.Hacks) && CommentIdentifier == other.CommentIdentifier && Equals(Range, other.Range);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (Authors != null ? Authors.ContentHashCode() : 0);
        hash = hash * 31 + Date.GetHashCode();
        hash = hash * 31 + (Content != null ? Content.GetHashCode() : 0);
        hash = hash * 31 + (Invariants != null ? Invariants.ContentHashCode() : 0);
        hash = hash * 31 + (References != null ? References.ContentHashCode() : 0);
        hash = hash * 31 + (ToDos != null ? ToDos.ContentHashCode() : 0);
        hash = hash * 31 + (Hacks != null ? Hacks.ContentHashCode() : 0);
        hash = hash * 31 + CommentIdentifier.GetHashCode();
        hash = hash * 31 + Range.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdIntelligentComment (");
      using (printer.IndentCookie()) {
        printer.Print("authors = "); Authors.PrintEx(printer); printer.Println();
        printer.Print("date = "); Date.PrintEx(printer); printer.Println();
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
        printer.Print("invariants = "); Invariants.PrintEx(printer); printer.Println();
        printer.Print("references = "); References.PrintEx(printer); printer.Println();
        printer.Print("toDos = "); ToDos.PrintEx(printer); printer.Println();
        printer.Print("hacks = "); Hacks.PrintEx(printer); printer.Println();
        printer.Print("commentIdentifier = "); CommentIdentifier.PrintEx(printer); printer.Println();
        printer.Print("range = "); Range.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:45</p>
  /// </summary>
  public sealed class RdIntelligentCommentAuthor : IPrintable, IEquatable<RdIntelligentCommentAuthor>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    public DateTime Date {get; private set;}
    
    //private fields
    //primary constructor
    public RdIntelligentCommentAuthor(
      [NotNull] string name,
      DateTime date
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      Date = date;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, out DateTime date)
    {
      name = Name;
      date = Date;
    }
    //statics
    
    public static CtxReadDelegate<RdIntelligentCommentAuthor> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var date = reader.ReadDateTime();
      var _result = new RdIntelligentCommentAuthor(name, date);
      return _result;
    };
    
    public static CtxWriteDelegate<RdIntelligentCommentAuthor> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write(value.Date);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdIntelligentCommentAuthor) obj);
    }
    public bool Equals(RdIntelligentCommentAuthor other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Date == other.Date;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Date.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdIntelligentCommentAuthor (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("date = "); Date.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:56</p>
  /// </summary>
  public sealed class RdIntelligentCommentContent : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdIntelligentCommentContent(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdIntelligentCommentContent> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdIntelligentCommentContent(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdIntelligentCommentContent> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdIntelligentCommentContent) obj);
    }
    public bool Equals(RdIntelligentCommentContent other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdIntelligentCommentContent (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:163</p>
  /// </summary>
  public abstract class RdInvariant{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdInvariant> Read = Polymorphic<RdInvariant>.ReadAbstract(RdInvariant_Unknown.Read);
    
    public static CtxWriteDelegate<RdInvariant> Write = Polymorphic<RdInvariant>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdInvariant_Unknown : RdInvariant
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdInvariant_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdInvariant_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdInvariant_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdInvariant_Unknown) obj);
    }
    public bool Equals(RdInvariant_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdInvariant_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:192</p>
  /// </summary>
  public sealed class RdLangWordReference : RdReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdLangWordReference(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdLangWordReference> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var _result = new RdLangWordReference(rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdLangWordReference> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdLangWordReference) obj);
    }
    public bool Equals(RdLangWordReference other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdLangWordReference (");
      using (printer.IndentCookie()) {
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:126</p>
  /// </summary>
  public sealed class RdListItem : IPrintable, IEquatable<RdListItem>
  {
    //fields
    //public fields
    [CanBeNull] public RdContentSegments Header {get; private set;}
    [CanBeNull] public RdContentSegments Description {get; private set;}
    
    //private fields
    //primary constructor
    public RdListItem(
      [CanBeNull] RdContentSegments header = null,
      [CanBeNull] RdContentSegments description = null
    )
    {
      Header = header;
      Description = description;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out RdContentSegments header, [CanBeNull] out RdContentSegments description)
    {
      header = Header;
      description = Description;
    }
    //statics
    
    public static CtxReadDelegate<RdListItem> Read = (ctx, reader) => 
    {
      var header = ReadRdContentSegmentsNullable(ctx, reader);
      var description = ReadRdContentSegmentsNullable(ctx, reader);
      var _result = new RdListItem(header, description);
      return _result;
    };
    public static CtxReadDelegate<RdContentSegments> ReadRdContentSegmentsNullable = RdContentSegments.Read.NullableClass();
    
    public static CtxWriteDelegate<RdListItem> Write = (ctx, writer, value) => 
    {
      WriteRdContentSegmentsNullable(ctx, writer, value.Header);
      WriteRdContentSegmentsNullable(ctx, writer, value.Description);
    };
    public static  CtxWriteDelegate<RdContentSegments> WriteRdContentSegmentsNullable = RdContentSegments.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdListItem) obj);
    }
    public bool Equals(RdListItem other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Header, other.Header) && Equals(Description, other.Description);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (Header != null ? Header.GetHashCode() : 0);
        hash = hash * 31 + (Description != null ? Description.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdListItem (");
      using (printer.IndentCookie()) {
        printer.Print("header = "); Header.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:120</p>
  /// </summary>
  public sealed class RdListSegment : RdContentSegment
  {
    //fields
    //public fields
    public JetBrains.Rider.Model.ListKind ListKind {get; private set;}
    [NotNull] public List<RdListItem> ListContent {get; private set;}
    [CanBeNull] public RdHighlightedText Header {get; private set;}
    
    //private fields
    //primary constructor
    public RdListSegment(
      JetBrains.Rider.Model.ListKind listKind,
      [NotNull] List<RdListItem> listContent,
      [CanBeNull] RdHighlightedText header = null
    )
    {
      if (listContent == null) throw new ArgumentNullException("listContent");
      
      ListKind = listKind;
      ListContent = listContent;
      Header = header;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdListSegment> Read = (ctx, reader) => 
    {
      var listKind = (JetBrains.Rider.Model.ListKind)reader.ReadInt();
      var listContent = ReadRdListItemList(ctx, reader);
      var header = ReadRdHighlightedTextNullable(ctx, reader);
      var _result = new RdListSegment(listKind, listContent, header);
      return _result;
    };
    public static CtxReadDelegate<List<RdListItem>> ReadRdListItemList = RdListItem.Read.List();
    public static CtxReadDelegate<RdHighlightedText> ReadRdHighlightedTextNullable = RdHighlightedText.Read.NullableClass();
    
    public static new CtxWriteDelegate<RdListSegment> Write = (ctx, writer, value) => 
    {
      writer.Write((int)value.ListKind);
      WriteRdListItemList(ctx, writer, value.ListContent);
      WriteRdHighlightedTextNullable(ctx, writer, value.Header);
    };
    public static  CtxWriteDelegate<List<RdListItem>> WriteRdListItemList = RdListItem.Write.List();
    public static  CtxWriteDelegate<RdHighlightedText> WriteRdHighlightedTextNullable = RdHighlightedText.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdListSegment) obj);
    }
    public bool Equals(RdListSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ListKind == other.ListKind && ListContent.SequenceEqual(other.ListContent) && Equals(Header, other.Header);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (int) ListKind;
        hash = hash * 31 + ListContent.ContentHashCode();
        hash = hash * 31 + (Header != null ? Header.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdListSegment (");
      using (printer.IndentCookie()) {
        printer.Print("listKind = "); ListKind.PrintEx(printer); printer.Println();
        printer.Print("listContent = "); ListContent.PrintEx(printer); printer.Println();
        printer.Print("header = "); Header.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:277</p>
  /// </summary>
  public sealed class RdNavigationRequest : IPrintable, IEquatable<RdNavigationRequest>
  {
    //fields
    //public fields
    [NotNull] public RdReference Reference {get; private set;}
    [NotNull] public JetBrains.Rider.Model.TextControlId TextControlId {get; private set;}
    
    //private fields
    //primary constructor
    public RdNavigationRequest(
      [NotNull] RdReference reference,
      [NotNull] JetBrains.Rider.Model.TextControlId textControlId
    )
    {
      if (reference == null) throw new ArgumentNullException("reference");
      if (textControlId == null) throw new ArgumentNullException("textControlId");
      
      Reference = reference;
      TextControlId = textControlId;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out RdReference reference, [NotNull] out JetBrains.Rider.Model.TextControlId textControlId)
    {
      reference = Reference;
      textControlId = TextControlId;
    }
    //statics
    
    public static CtxReadDelegate<RdNavigationRequest> Read = (ctx, reader) => 
    {
      var reference = RdReference.Read(ctx, reader);
      var textControlId = JetBrains.Rider.Model.TextControlId.Read(ctx, reader);
      var _result = new RdNavigationRequest(reference, textControlId);
      return _result;
    };
    
    public static CtxWriteDelegate<RdNavigationRequest> Write = (ctx, writer, value) => 
    {
      RdReference.Write(ctx, writer, value.Reference);
      JetBrains.Rider.Model.TextControlId.Write(ctx, writer, value.TextControlId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdNavigationRequest) obj);
    }
    public bool Equals(RdNavigationRequest other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Reference, other.Reference) && Equals(TextControlId, other.TextControlId);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Reference.GetHashCode();
        hash = hash * 31 + TextControlId.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdNavigationRequest (");
      using (printer.IndentCookie()) {
        printer.Print("reference = "); Reference.PrintEx(printer); printer.Println();
        printer.Print("textControlId = "); TextControlId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:73</p>
  /// </summary>
  public sealed class RdParagraphSegment : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdParagraphSegment(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdParagraphSegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdParagraphSegment(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdParagraphSegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdParagraphSegment) obj);
    }
    public bool Equals(RdParagraphSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdParagraphSegment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:63</p>
  /// </summary>
  public class RdParam : RdSegmentWithContent
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Name {get; private set;}
    
    //private fields
    //primary constructor
    public RdParam(
      [NotNull] RdHighlightedText name,
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdParam> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var name = RdHighlightedText.Read(ctx, reader);
      var _result = new RdParam(name, content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdParam> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
      RdHighlightedText.Write(ctx, writer, value.Name);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdParam) obj);
    }
    public bool Equals(RdParam other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Name, other.Name) && Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public virtual void Print(PrettyPrinter printer)
    {
      printer.Println("RdParam (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  public sealed class RdParam_Unknown : RdParam
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdParam_Unknown(
      [NotNull] RdHighlightedText name,
      [NotNull] RdContentSegments content
    ) : base (
      name,
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdParam_Unknown> Read = (ctx, reader) => 
    {
      var name = RdHighlightedText.Read(ctx, reader);
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdParam_Unknown(name, content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdParam_Unknown> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Name);
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdParam_Unknown) obj);
    }
    public bool Equals(RdParam_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Name, other.Name) && Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdParam_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:232</p>
  /// </summary>
  public sealed class RdPredefinedForegroundColorAnimation : RdTextAnimation
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    
    //private fields
    //primary constructor
    public RdPredefinedForegroundColorAnimation(
      [NotNull] string key
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      
      Key = key;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdPredefinedForegroundColorAnimation> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var _result = new RdPredefinedForegroundColorAnimation(key);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdPredefinedForegroundColorAnimation> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdPredefinedForegroundColorAnimation) obj);
    }
    public bool Equals(RdPredefinedForegroundColorAnimation other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdPredefinedForegroundColorAnimation (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:174</p>
  /// </summary>
  public sealed class RdProxyReference : RdReference
  {
    //fields
    //public fields
    public int RealReferenceId {get; private set;}
    
    //private fields
    //primary constructor
    public RdProxyReference(
      int realReferenceId,
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
      RealReferenceId = realReferenceId;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdProxyReference> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var realReferenceId = reader.ReadInt();
      var _result = new RdProxyReference(realReferenceId, rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdProxyReference> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
      writer.Write(value.RealReferenceId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdProxyReference) obj);
    }
    public bool Equals(RdProxyReference other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RealReferenceId == other.RealReferenceId && RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RealReferenceId.GetHashCode();
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdProxyReference (");
      using (printer.IndentCookie()) {
        printer.Print("realReferenceId = "); RealReferenceId.PrintEx(printer); printer.Println();
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:170</p>
  /// </summary>
  public abstract class RdReference{
    //fields
    //public fields
    [NotNull] public string RawValue {get; private set;}
    
    //private fields
    //primary constructor
    protected RdReference(
      [NotNull] string rawValue
    )
    {
      if (rawValue == null) throw new ArgumentNullException("rawValue");
      
      RawValue = rawValue;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdReference> Read = Polymorphic<RdReference>.ReadAbstract(RdReference_Unknown.Read);
    
    public static CtxWriteDelegate<RdReference> Write = Polymorphic<RdReference>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdReference_Unknown : RdReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdReference_Unknown(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdReference_Unknown> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var _result = new RdReference_Unknown(rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdReference_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdReference_Unknown) obj);
    }
    public bool Equals(RdReference_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdReference_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:71</p>
  /// </summary>
  public sealed class RdRemarksSegment : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdRemarksSegment(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdRemarksSegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdRemarksSegment(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdRemarksSegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdRemarksSegment) obj);
    }
    public bool Equals(RdRemarksSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdRemarksSegment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:75</p>
  /// </summary>
  public sealed class RdReturnSegment : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdReturnSegment(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdReturnSegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdReturnSegment(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdReturnSegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdReturnSegment) obj);
    }
    public bool Equals(RdReturnSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdReturnSegment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:186</p>
  /// </summary>
  public sealed class RdSandboxCodeEntityReference : RdCodeEntityReference
  {
    //fields
    //public fields
    [NotNull] public string SandboxFileId {get; private set;}
    [CanBeNull] public RdDocumentId OriginalDocumentId {get; private set;}
    [NotNull] public RdTextRange Range {get; private set;}
    
    //private fields
    //primary constructor
    public RdSandboxCodeEntityReference(
      [NotNull] string sandboxFileId,
      [CanBeNull] RdDocumentId originalDocumentId,
      [NotNull] RdTextRange range,
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
      if (sandboxFileId == null) throw new ArgumentNullException("sandboxFileId");
      if (range == null) throw new ArgumentNullException("range");
      
      SandboxFileId = sandboxFileId;
      OriginalDocumentId = originalDocumentId;
      Range = range;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSandboxCodeEntityReference> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var sandboxFileId = reader.ReadString();
      var originalDocumentId = ReadRdDocumentIdNullable(ctx, reader);
      var range = RdTextRange.Read(ctx, reader);
      var _result = new RdSandboxCodeEntityReference(sandboxFileId, originalDocumentId, range, rawValue);
      return _result;
    };
    public static CtxReadDelegate<RdDocumentId> ReadRdDocumentIdNullable = RdDocumentId.Read.NullableClass();
    
    public static new CtxWriteDelegate<RdSandboxCodeEntityReference> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
      writer.Write(value.SandboxFileId);
      WriteRdDocumentIdNullable(ctx, writer, value.OriginalDocumentId);
      RdTextRange.Write(ctx, writer, value.Range);
    };
    public static  CtxWriteDelegate<RdDocumentId> WriteRdDocumentIdNullable = RdDocumentId.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdSandboxCodeEntityReference) obj);
    }
    public bool Equals(RdSandboxCodeEntityReference other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return SandboxFileId == other.SandboxFileId && Equals(OriginalDocumentId, other.OriginalDocumentId) && Equals(Range, other.Range) && RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + SandboxFileId.GetHashCode();
        hash = hash * 31 + (OriginalDocumentId != null ? OriginalDocumentId.GetHashCode() : 0);
        hash = hash * 31 + Range.GetHashCode();
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdSandboxCodeEntityReference (");
      using (printer.IndentCookie()) {
        printer.Print("sandboxFileId = "); SandboxFileId.PrintEx(printer); printer.Println();
        printer.Print("originalDocumentId = "); OriginalDocumentId.PrintEx(printer); printer.Println();
        printer.Print("range = "); Range.PrintEx(printer); printer.Println();
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:86</p>
  /// </summary>
  public abstract class RdSeeAlsoContentSegment : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Description {get; private set;}
    
    //private fields
    //primary constructor
    protected RdSeeAlsoContentSegment(
      [NotNull] RdHighlightedText description
    )
    {
      if (description == null) throw new ArgumentNullException("description");
      
      Description = description;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSeeAlsoContentSegment> Read = Polymorphic<RdSeeAlsoContentSegment>.ReadAbstract(RdSeeAlsoContentSegment_Unknown.Read);
    
    public static new CtxWriteDelegate<RdSeeAlsoContentSegment> Write = Polymorphic<RdSeeAlsoContentSegment>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdSeeAlsoContentSegment_Unknown : RdSeeAlsoContentSegment
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdSeeAlsoContentSegment_Unknown(
      [NotNull] RdHighlightedText description
    ) : base (
      description
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSeeAlsoContentSegment_Unknown> Read = (ctx, reader) => 
    {
      var description = RdHighlightedText.Read(ctx, reader);
      var _result = new RdSeeAlsoContentSegment_Unknown(description);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdSeeAlsoContentSegment_Unknown> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Description);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdSeeAlsoContentSegment_Unknown) obj);
    }
    public bool Equals(RdSeeAlsoContentSegment_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Description, other.Description);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Description.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdSeeAlsoContentSegment_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:94</p>
  /// </summary>
  public sealed class RdSeeAlsoLinkContentSegment : RdSeeAlsoContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdExternalReference Reference {get; private set;}
    
    //private fields
    //primary constructor
    public RdSeeAlsoLinkContentSegment(
      [NotNull] RdExternalReference reference,
      [NotNull] RdHighlightedText description
    ) : base (
      description
     ) 
    {
      if (reference == null) throw new ArgumentNullException("reference");
      
      Reference = reference;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSeeAlsoLinkContentSegment> Read = (ctx, reader) => 
    {
      var description = RdHighlightedText.Read(ctx, reader);
      var reference = RdExternalReference.Read(ctx, reader);
      var _result = new RdSeeAlsoLinkContentSegment(reference, description);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdSeeAlsoLinkContentSegment> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Description);
      RdExternalReference.Write(ctx, writer, value.Reference);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdSeeAlsoLinkContentSegment) obj);
    }
    public bool Equals(RdSeeAlsoLinkContentSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Reference, other.Reference) && Equals(Description, other.Description);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Reference.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdSeeAlsoLinkContentSegment (");
      using (printer.IndentCookie()) {
        printer.Print("reference = "); Reference.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:90</p>
  /// </summary>
  public sealed class RdSeeAlsoMemberContentSegment : RdSeeAlsoContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdCodeEntityReference Reference {get; private set;}
    
    //private fields
    //primary constructor
    public RdSeeAlsoMemberContentSegment(
      [NotNull] RdCodeEntityReference reference,
      [NotNull] RdHighlightedText description
    ) : base (
      description
     ) 
    {
      if (reference == null) throw new ArgumentNullException("reference");
      
      Reference = reference;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSeeAlsoMemberContentSegment> Read = (ctx, reader) => 
    {
      var description = RdHighlightedText.Read(ctx, reader);
      var reference = RdCodeEntityReference.Read(ctx, reader);
      var _result = new RdSeeAlsoMemberContentSegment(reference, description);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdSeeAlsoMemberContentSegment> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Description);
      RdCodeEntityReference.Write(ctx, writer, value.Reference);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdSeeAlsoMemberContentSegment) obj);
    }
    public bool Equals(RdSeeAlsoMemberContentSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Reference, other.Reference) && Equals(Description, other.Description);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Reference.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdSeeAlsoMemberContentSegment (");
      using (printer.IndentCookie()) {
        printer.Print("reference = "); Reference.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:52</p>
  /// </summary>
  public abstract class RdSegmentWithContent : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdContentSegments Content {get; private set;}
    
    //private fields
    //primary constructor
    protected RdSegmentWithContent(
      [NotNull] RdContentSegments content
    )
    {
      if (content == null) throw new ArgumentNullException("content");
      
      Content = content;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSegmentWithContent> Read = Polymorphic<RdSegmentWithContent>.ReadAbstract(RdSegmentWithContent_Unknown.Read);
    
    public static new CtxWriteDelegate<RdSegmentWithContent> Write = Polymorphic<RdSegmentWithContent>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdSegmentWithContent_Unknown : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdSegmentWithContent_Unknown(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSegmentWithContent_Unknown> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdSegmentWithContent_Unknown(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdSegmentWithContent_Unknown> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdSegmentWithContent_Unknown) obj);
    }
    public bool Equals(RdSegmentWithContent_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdSegmentWithContent_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:69</p>
  /// </summary>
  public sealed class RdSummarySegment : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdSummarySegment(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdSummarySegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdSummarySegment(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdSummarySegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdSummarySegment) obj);
    }
    public bool Equals(RdSummarySegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdSummarySegment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:140</p>
  /// </summary>
  public sealed class RdTableCell : IPrintable, IEquatable<RdTableCell>
  {
    //fields
    //public fields
    [NotNull] public RdContentSegments Content {get; private set;}
    [CanBeNull] public RdTableCellProperties Properties {get; private set;}
    
    //private fields
    //primary constructor
    public RdTableCell(
      [NotNull] RdContentSegments content,
      [CanBeNull] RdTableCellProperties properties = null
    )
    {
      if (content == null) throw new ArgumentNullException("content");
      
      Content = content;
      Properties = properties;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out RdContentSegments content, [CanBeNull] out RdTableCellProperties properties)
    {
      content = Content;
      properties = Properties;
    }
    //statics
    
    public static CtxReadDelegate<RdTableCell> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var properties = ReadRdTableCellPropertiesNullable(ctx, reader);
      var _result = new RdTableCell(content, properties);
      return _result;
    };
    public static CtxReadDelegate<RdTableCellProperties> ReadRdTableCellPropertiesNullable = RdTableCellProperties.Read.NullableClass();
    
    public static CtxWriteDelegate<RdTableCell> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
      WriteRdTableCellPropertiesNullable(ctx, writer, value.Properties);
    };
    public static  CtxWriteDelegate<RdTableCellProperties> WriteRdTableCellPropertiesNullable = RdTableCellProperties.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTableCell) obj);
    }
    public bool Equals(RdTableCell other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content) && Equals(Properties, other.Properties);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        hash = hash * 31 + (Properties != null ? Properties.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTableCell (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
        printer.Print("properties = "); Properties.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:145</p>
  /// </summary>
  public sealed class RdTableCellProperties : IPrintable, IEquatable<RdTableCellProperties>
  {
    //fields
    //public fields
    public RdHorizontalAlignment HorizontalAlignment {get; private set;}
    public RdVerticalAlignment VerticalAlignment {get; private set;}
    public bool IsHeader {get; private set;}
    
    //private fields
    //primary constructor
    public RdTableCellProperties(
      RdHorizontalAlignment horizontalAlignment,
      RdVerticalAlignment verticalAlignment,
      bool isHeader
    )
    {
      HorizontalAlignment = horizontalAlignment;
      VerticalAlignment = verticalAlignment;
      IsHeader = isHeader;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct(out RdHorizontalAlignment horizontalAlignment, out RdVerticalAlignment verticalAlignment, out bool isHeader)
    {
      horizontalAlignment = HorizontalAlignment;
      verticalAlignment = VerticalAlignment;
      isHeader = IsHeader;
    }
    //statics
    
    public static CtxReadDelegate<RdTableCellProperties> Read = (ctx, reader) => 
    {
      var horizontalAlignment = (RdHorizontalAlignment)reader.ReadInt();
      var verticalAlignment = (RdVerticalAlignment)reader.ReadInt();
      var isHeader = reader.ReadBool();
      var _result = new RdTableCellProperties(horizontalAlignment, verticalAlignment, isHeader);
      return _result;
    };
    
    public static CtxWriteDelegate<RdTableCellProperties> Write = (ctx, writer, value) => 
    {
      writer.Write((int)value.HorizontalAlignment);
      writer.Write((int)value.VerticalAlignment);
      writer.Write(value.IsHeader);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTableCellProperties) obj);
    }
    public bool Equals(RdTableCellProperties other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return HorizontalAlignment == other.HorizontalAlignment && VerticalAlignment == other.VerticalAlignment && IsHeader == other.IsHeader;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (int) HorizontalAlignment;
        hash = hash * 31 + (int) VerticalAlignment;
        hash = hash * 31 + IsHeader.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTableCellProperties (");
      using (printer.IndentCookie()) {
        printer.Print("horizontalAlignment = "); HorizontalAlignment.PrintEx(printer); printer.Println();
        printer.Print("verticalAlignment = "); VerticalAlignment.PrintEx(printer); printer.Println();
        printer.Print("isHeader = "); IsHeader.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:136</p>
  /// </summary>
  public sealed class RdTableRow : IPrintable, IEquatable<RdTableRow>
  {
    //fields
    //public fields
    [NotNull] public List<RdTableCell> Cells {get; private set;}
    
    //private fields
    //primary constructor
    public RdTableRow(
      [NotNull] List<RdTableCell> cells
    )
    {
      if (cells == null) throw new ArgumentNullException("cells");
      
      Cells = cells;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out List<RdTableCell> cells)
    {
      cells = Cells;
    }
    //statics
    
    public static CtxReadDelegate<RdTableRow> Read = (ctx, reader) => 
    {
      var cells = ReadRdTableCellList(ctx, reader);
      var _result = new RdTableRow(cells);
      return _result;
    };
    public static CtxReadDelegate<List<RdTableCell>> ReadRdTableCellList = RdTableCell.Read.List();
    
    public static CtxWriteDelegate<RdTableRow> Write = (ctx, writer, value) => 
    {
      WriteRdTableCellList(ctx, writer, value.Cells);
    };
    public static  CtxWriteDelegate<List<RdTableCell>> WriteRdTableCellList = RdTableCell.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTableRow) obj);
    }
    public bool Equals(RdTableRow other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Cells.SequenceEqual(other.Cells);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Cells.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTableRow (");
      using (printer.IndentCookie()) {
        printer.Print("cells = "); Cells.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:131</p>
  /// </summary>
  public sealed class RdTableSegment : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public List<RdTableRow> Rows {get; private set;}
    [CanBeNull] public RdHighlightedText Header {get; private set;}
    
    //private fields
    //primary constructor
    public RdTableSegment(
      [NotNull] List<RdTableRow> rows,
      [CanBeNull] RdHighlightedText header = null
    )
    {
      if (rows == null) throw new ArgumentNullException("rows");
      
      Rows = rows;
      Header = header;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTableSegment> Read = (ctx, reader) => 
    {
      var rows = ReadRdTableRowList(ctx, reader);
      var header = ReadRdHighlightedTextNullable(ctx, reader);
      var _result = new RdTableSegment(rows, header);
      return _result;
    };
    public static CtxReadDelegate<List<RdTableRow>> ReadRdTableRowList = RdTableRow.Read.List();
    public static CtxReadDelegate<RdHighlightedText> ReadRdHighlightedTextNullable = RdHighlightedText.Read.NullableClass();
    
    public static new CtxWriteDelegate<RdTableSegment> Write = (ctx, writer, value) => 
    {
      WriteRdTableRowList(ctx, writer, value.Rows);
      WriteRdHighlightedTextNullable(ctx, writer, value.Header);
    };
    public static  CtxWriteDelegate<List<RdTableRow>> WriteRdTableRowList = RdTableRow.Write.List();
    public static  CtxWriteDelegate<RdHighlightedText> WriteRdHighlightedTextNullable = RdHighlightedText.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTableSegment) obj);
    }
    public bool Equals(RdTableSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Rows.SequenceEqual(other.Rows) && Equals(Header, other.Header);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Rows.ContentHashCode();
        hash = hash * 31 + (Header != null ? Header.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTableSegment (");
      using (printer.IndentCookie()) {
        printer.Print("rows = "); Rows.PrintEx(printer); printer.Println();
        printer.Print("header = "); Header.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:226</p>
  /// </summary>
  public abstract class RdTextAnimation{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdTextAnimation> Read = Polymorphic<RdTextAnimation>.ReadAbstract(RdTextAnimation_Unknown.Read);
    
    public static CtxWriteDelegate<RdTextAnimation> Write = Polymorphic<RdTextAnimation>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdTextAnimation_Unknown : RdTextAnimation
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTextAnimation_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdTextAnimation_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTextAnimation_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextAnimation_Unknown) obj);
    }
    public bool Equals(RdTextAnimation_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextAnimation_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:210</p>
  /// </summary>
  public sealed class RdTextAttributes : IPrintable, IEquatable<RdTextAttributes>
  {
    //fields
    //public fields
    [CanBeNull] public RdFontStyle? FontStyle {get; private set;}
    [CanBeNull] public bool? Underline {get; private set;}
    [CanBeNull] public float? FontWeight {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextAttributes(
      [CanBeNull] RdFontStyle? fontStyle = null,
      [CanBeNull] bool? underline = null,
      [CanBeNull] float? fontWeight = null
    )
    {
      FontStyle = fontStyle;
      Underline = underline;
      FontWeight = fontWeight;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out RdFontStyle? fontStyle, [CanBeNull] out bool? underline, [CanBeNull] out float? fontWeight)
    {
      fontStyle = FontStyle;
      underline = Underline;
      fontWeight = FontWeight;
    }
    //statics
    
    public static CtxReadDelegate<RdTextAttributes> Read = (ctx, reader) => 
    {
      var fontStyle = ReadRdFontStyleNullable(ctx, reader);
      var underline = ReadBoolNullable(ctx, reader);
      var fontWeight = ReadFloatNullable(ctx, reader);
      var _result = new RdTextAttributes(fontStyle, underline, fontWeight);
      return _result;
    };
    public static CtxReadDelegate<RdFontStyle?> ReadRdFontStyleNullable = new CtxReadDelegate<RdFontStyle>(JetBrains.Rd.Impl.Serializers.ReadEnum<RdFontStyle>).NullableStruct();
    public static CtxReadDelegate<bool?> ReadBoolNullable = JetBrains.Rd.Impl.Serializers.ReadBool.NullableStruct();
    public static CtxReadDelegate<float?> ReadFloatNullable = JetBrains.Rd.Impl.Serializers.ReadFloat.NullableStruct();
    
    public static CtxWriteDelegate<RdTextAttributes> Write = (ctx, writer, value) => 
    {
      WriteRdFontStyleNullable(ctx, writer, value.FontStyle);
      WriteBoolNullable(ctx, writer, value.Underline);
      WriteFloatNullable(ctx, writer, value.FontWeight);
    };
    public static  CtxWriteDelegate<RdFontStyle?> WriteRdFontStyleNullable = new CtxWriteDelegate<RdFontStyle>(JetBrains.Rd.Impl.Serializers.WriteEnum<RdFontStyle>).NullableStruct();
    public static  CtxWriteDelegate<bool?> WriteBoolNullable = JetBrains.Rd.Impl.Serializers.WriteBool.NullableStruct();
    public static  CtxWriteDelegate<float?> WriteFloatNullable = JetBrains.Rd.Impl.Serializers.WriteFloat.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextAttributes) obj);
    }
    public bool Equals(RdTextAttributes other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(FontStyle, other.FontStyle) && Equals(Underline, other.Underline) && Equals(FontWeight, other.FontWeight);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (FontStyle != null ? (int) FontStyle : 0);
        hash = hash * 31 + (Underline != null ? Underline.GetHashCode() : 0);
        hash = hash * 31 + (FontWeight != null ? FontWeight.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextAttributes (");
      using (printer.IndentCookie()) {
        printer.Print("fontStyle = "); FontStyle.PrintEx(printer); printer.Println();
        printer.Print("underline = "); Underline.PrintEx(printer); printer.Println();
        printer.Print("fontWeight = "); FontWeight.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:199</p>
  /// </summary>
  public sealed class RdTextHighlighter : IPrintable, IEquatable<RdTextHighlighter>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    public int StartOffset {get; private set;}
    public int EndOffset {get; private set;}
    [NotNull] public RdTextAttributes Attributes {get; private set;}
    [CanBeNull] public RdBackgroundStyle BackgroundStyle {get; private set;}
    [CanBeNull] public RdTextAnimation Animation {get; private set;}
    [CanBeNull] public List<RdReference> References {get; private set;}
    [CanBeNull] public bool? IsResharperHighlighter {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextHighlighter(
      [NotNull] string key,
      int startOffset,
      int endOffset,
      [NotNull] RdTextAttributes attributes,
      [CanBeNull] RdBackgroundStyle backgroundStyle = null,
      [CanBeNull] RdTextAnimation animation = null,
      [CanBeNull] List<RdReference> references = null,
      [CanBeNull] bool? isResharperHighlighter = null
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (attributes == null) throw new ArgumentNullException("attributes");
      
      Key = key;
      StartOffset = startOffset;
      EndOffset = endOffset;
      Attributes = attributes;
      BackgroundStyle = backgroundStyle;
      Animation = animation;
      References = references;
      IsResharperHighlighter = isResharperHighlighter;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, out int startOffset, out int endOffset, [NotNull] out RdTextAttributes attributes, [CanBeNull] out RdBackgroundStyle backgroundStyle, [CanBeNull] out RdTextAnimation animation, [CanBeNull] out List<RdReference> references, [CanBeNull] out bool? isResharperHighlighter)
    {
      key = Key;
      startOffset = StartOffset;
      endOffset = EndOffset;
      attributes = Attributes;
      backgroundStyle = BackgroundStyle;
      animation = Animation;
      references = References;
      isResharperHighlighter = IsResharperHighlighter;
    }
    //statics
    
    public static CtxReadDelegate<RdTextHighlighter> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var startOffset = reader.ReadInt();
      var endOffset = reader.ReadInt();
      var attributes = RdTextAttributes.Read(ctx, reader);
      var backgroundStyle = ReadRdBackgroundStyleNullable(ctx, reader);
      var animation = ReadRdTextAnimationNullable(ctx, reader);
      var references = ReadRdReferenceListNullable(ctx, reader);
      var isResharperHighlighter = ReadBoolNullable(ctx, reader);
      var _result = new RdTextHighlighter(key, startOffset, endOffset, attributes, backgroundStyle, animation, references, isResharperHighlighter);
      return _result;
    };
    public static CtxReadDelegate<RdBackgroundStyle> ReadRdBackgroundStyleNullable = RdBackgroundStyle.Read.NullableClass();
    public static CtxReadDelegate<RdTextAnimation> ReadRdTextAnimationNullable = RdTextAnimation.Read.NullableClass();
    public static CtxReadDelegate<List<RdReference>> ReadRdReferenceListNullable = RdReference.Read.List().NullableClass();
    public static CtxReadDelegate<bool?> ReadBoolNullable = JetBrains.Rd.Impl.Serializers.ReadBool.NullableStruct();
    
    public static CtxWriteDelegate<RdTextHighlighter> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.StartOffset);
      writer.Write(value.EndOffset);
      RdTextAttributes.Write(ctx, writer, value.Attributes);
      WriteRdBackgroundStyleNullable(ctx, writer, value.BackgroundStyle);
      WriteRdTextAnimationNullable(ctx, writer, value.Animation);
      WriteRdReferenceListNullable(ctx, writer, value.References);
      WriteBoolNullable(ctx, writer, value.IsResharperHighlighter);
    };
    public static  CtxWriteDelegate<RdBackgroundStyle> WriteRdBackgroundStyleNullable = RdBackgroundStyle.Write.NullableClass();
    public static  CtxWriteDelegate<RdTextAnimation> WriteRdTextAnimationNullable = RdTextAnimation.Write.NullableClass();
    public static  CtxWriteDelegate<List<RdReference>> WriteRdReferenceListNullable = RdReference.Write.List().NullableClass();
    public static  CtxWriteDelegate<bool?> WriteBoolNullable = JetBrains.Rd.Impl.Serializers.WriteBool.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextHighlighter) obj);
    }
    public bool Equals(RdTextHighlighter other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && StartOffset == other.StartOffset && EndOffset == other.EndOffset && Equals(Attributes, other.Attributes) && Equals(BackgroundStyle, other.BackgroundStyle) && Equals(Animation, other.Animation) && Equals(References, other.References) && Equals(IsResharperHighlighter, other.IsResharperHighlighter);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + StartOffset.GetHashCode();
        hash = hash * 31 + EndOffset.GetHashCode();
        hash = hash * 31 + Attributes.GetHashCode();
        hash = hash * 31 + (BackgroundStyle != null ? BackgroundStyle.GetHashCode() : 0);
        hash = hash * 31 + (Animation != null ? Animation.GetHashCode() : 0);
        hash = hash * 31 + (References != null ? References.ContentHashCode() : 0);
        hash = hash * 31 + (IsResharperHighlighter != null ? IsResharperHighlighter.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextHighlighter (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("startOffset = "); StartOffset.PrintEx(printer); printer.Println();
        printer.Print("endOffset = "); EndOffset.PrintEx(printer); printer.Println();
        printer.Print("attributes = "); Attributes.PrintEx(printer); printer.Println();
        printer.Print("backgroundStyle = "); BackgroundStyle.PrintEx(printer); printer.Println();
        printer.Print("animation = "); Animation.PrintEx(printer); printer.Println();
        printer.Print("references = "); References.PrintEx(printer); printer.Println();
        printer.Print("isResharperHighlighter = "); IsResharperHighlighter.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:165</p>
  /// </summary>
  public sealed class RdTextInvariant : RdInvariant
  {
    //fields
    //public fields
    [NotNull] public string Text {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextInvariant(
      [NotNull] string text
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTextInvariant> Read = (ctx, reader) => 
    {
      var text = reader.ReadString();
      var _result = new RdTextInvariant(text);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTextInvariant> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Text);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextInvariant) obj);
    }
    public bool Equals(RdTextInvariant other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Text == other.Text;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextInvariant (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:103</p>
  /// </summary>
  public sealed class RdTextSegment : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Text {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextSegment(
      [NotNull] RdHighlightedText text
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTextSegment> Read = (ctx, reader) => 
    {
      var text = RdHighlightedText.Read(ctx, reader);
      var _result = new RdTextSegment(text);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTextSegment> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Text);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextSegment) obj);
    }
    public bool Equals(RdTextSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Text, other.Text);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextSegment (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:253</p>
  /// </summary>
  public sealed class RdTicket : IPrintable, IEquatable<RdTicket>
  {
    //fields
    //public fields
    [NotNull] public string Url {get; private set;}
    [NotNull] public string ShortName {get; private set;}
    
    //private fields
    //primary constructor
    public RdTicket(
      [NotNull] string url,
      [NotNull] string shortName
    )
    {
      if (url == null) throw new ArgumentNullException("url");
      if (shortName == null) throw new ArgumentNullException("shortName");
      
      Url = url;
      ShortName = shortName;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string url, [NotNull] out string shortName)
    {
      url = Url;
      shortName = ShortName;
    }
    //statics
    
    public static CtxReadDelegate<RdTicket> Read = (ctx, reader) => 
    {
      var url = reader.ReadString();
      var shortName = reader.ReadString();
      var _result = new RdTicket(url, shortName);
      return _result;
    };
    
    public static CtxWriteDelegate<RdTicket> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Url);
      writer.Write(value.ShortName);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTicket) obj);
    }
    public bool Equals(RdTicket other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Url == other.Url && ShortName == other.ShortName;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Url.GetHashCode();
        hash = hash * 31 + ShortName.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTicket (");
      using (printer.IndentCookie()) {
        printer.Print("url = "); Url.PrintEx(printer); printer.Println();
        printer.Print("shortName = "); ShortName.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:242</p>
  /// </summary>
  public abstract class RdToDo{
    //fields
    //public fields
    [NotNull] public RdIntelligentCommentAuthor Author {get; private set;}
    [NotNull] public string Name {get; private set;}
    [NotNull] public RdContentSegments Description {get; private set;}
    [NotNull] public List<RdReference> BlockingReferences {get; private set;}
    
    //private fields
    //primary constructor
    protected RdToDo(
      [NotNull] RdIntelligentCommentAuthor author,
      [NotNull] string name,
      [NotNull] RdContentSegments description,
      [NotNull] List<RdReference> blockingReferences
    )
    {
      if (author == null) throw new ArgumentNullException("author");
      if (name == null) throw new ArgumentNullException("name");
      if (description == null) throw new ArgumentNullException("description");
      if (blockingReferences == null) throw new ArgumentNullException("blockingReferences");
      
      Author = author;
      Name = name;
      Description = description;
      BlockingReferences = blockingReferences;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdToDo> Read = Polymorphic<RdToDo>.ReadAbstract(RdToDo_Unknown.Read);
    
    public static CtxWriteDelegate<RdToDo> Write = Polymorphic<RdToDo>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:249</p>
  /// </summary>
  public sealed class RdToDoWithTickets : RdToDo
  {
    //fields
    //public fields
    [NotNull] public List<RdTicket> Tickets {get; private set;}
    
    //private fields
    //primary constructor
    public RdToDoWithTickets(
      [NotNull] List<RdTicket> tickets,
      [NotNull] RdIntelligentCommentAuthor author,
      [NotNull] string name,
      [NotNull] RdContentSegments description,
      [NotNull] List<RdReference> blockingReferences
    ) : base (
      author,
      name,
      description,
      blockingReferences
     ) 
    {
      if (tickets == null) throw new ArgumentNullException("tickets");
      
      Tickets = tickets;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdToDoWithTickets> Read = (ctx, reader) => 
    {
      var author = RdIntelligentCommentAuthor.Read(ctx, reader);
      var name = reader.ReadString();
      var description = RdContentSegments.Read(ctx, reader);
      var blockingReferences = ReadRdReferenceList(ctx, reader);
      var tickets = ReadRdTicketList(ctx, reader);
      var _result = new RdToDoWithTickets(tickets, author, name, description, blockingReferences);
      return _result;
    };
    public static CtxReadDelegate<List<RdTicket>> ReadRdTicketList = RdTicket.Read.List();
    public static CtxReadDelegate<List<RdReference>> ReadRdReferenceList = RdReference.Read.List();
    
    public static new CtxWriteDelegate<RdToDoWithTickets> Write = (ctx, writer, value) => 
    {
      RdIntelligentCommentAuthor.Write(ctx, writer, value.Author);
      writer.Write(value.Name);
      RdContentSegments.Write(ctx, writer, value.Description);
      WriteRdReferenceList(ctx, writer, value.BlockingReferences);
      WriteRdTicketList(ctx, writer, value.Tickets);
    };
    public static  CtxWriteDelegate<List<RdTicket>> WriteRdTicketList = RdTicket.Write.List();
    public static  CtxWriteDelegate<List<RdReference>> WriteRdReferenceList = RdReference.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdToDoWithTickets) obj);
    }
    public bool Equals(RdToDoWithTickets other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Tickets.SequenceEqual(other.Tickets) && Equals(Author, other.Author) && Name == other.Name && Equals(Description, other.Description) && BlockingReferences.SequenceEqual(other.BlockingReferences);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Tickets.ContentHashCode();
        hash = hash * 31 + Author.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        hash = hash * 31 + BlockingReferences.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdToDoWithTickets (");
      using (printer.IndentCookie()) {
        printer.Print("tickets = "); Tickets.PrintEx(printer); printer.Println();
        printer.Print("author = "); Author.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("blockingReferences = "); BlockingReferences.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  public sealed class RdToDo_Unknown : RdToDo
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdToDo_Unknown(
      [NotNull] RdIntelligentCommentAuthor author,
      [NotNull] string name,
      [NotNull] RdContentSegments description,
      [NotNull] List<RdReference> blockingReferences
    ) : base (
      author,
      name,
      description,
      blockingReferences
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdToDo_Unknown> Read = (ctx, reader) => 
    {
      var author = RdIntelligentCommentAuthor.Read(ctx, reader);
      var name = reader.ReadString();
      var description = RdContentSegments.Read(ctx, reader);
      var blockingReferences = ReadRdReferenceList(ctx, reader);
      var _result = new RdToDo_Unknown(author, name, description, blockingReferences);
      return _result;
    };
    public static CtxReadDelegate<List<RdReference>> ReadRdReferenceList = RdReference.Read.List();
    
    public static new CtxWriteDelegate<RdToDo_Unknown> Write = (ctx, writer, value) => 
    {
      RdIntelligentCommentAuthor.Write(ctx, writer, value.Author);
      writer.Write(value.Name);
      RdContentSegments.Write(ctx, writer, value.Description);
      WriteRdReferenceList(ctx, writer, value.BlockingReferences);
    };
    public static  CtxWriteDelegate<List<RdReference>> WriteRdReferenceList = RdReference.Write.List();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdToDo_Unknown) obj);
    }
    public bool Equals(RdToDo_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Author, other.Author) && Name == other.Name && Equals(Description, other.Description) && BlockingReferences.SequenceEqual(other.BlockingReferences);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Author.GetHashCode();
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Description.GetHashCode();
        hash = hash * 31 + BlockingReferences.ContentHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdToDo_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("author = "); Author.PrintEx(printer); printer.Println();
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("description = "); Description.PrintEx(printer); printer.Println();
        printer.Print("blockingReferences = "); BlockingReferences.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:67</p>
  /// </summary>
  public sealed class RdTypeParam : RdParam
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdTypeParam(
      [NotNull] RdHighlightedText name,
      [NotNull] RdContentSegments content
    ) : base (
      name,
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTypeParam> Read = (ctx, reader) => 
    {
      var name = RdHighlightedText.Read(ctx, reader);
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdTypeParam(name, content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTypeParam> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Name);
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTypeParam) obj);
    }
    public bool Equals(RdTypeParam other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Name, other.Name) && Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdTypeParam (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:227</p>
  /// </summary>
  public sealed class RdUnderlineTextAnimation : RdTextAnimation
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdUnderlineTextAnimation> Read = (ctx, reader) => 
    {
      var _result = new RdUnderlineTextAnimation();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdUnderlineTextAnimation> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdUnderlineTextAnimation) obj);
    }
    public bool Equals(RdUnderlineTextAnimation other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdUnderlineTextAnimation (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:79</p>
  /// </summary>
  public sealed class RdValueSegment : RdSegmentWithContent
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdValueSegment(
      [NotNull] RdContentSegments content
    ) : base (
      content
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdValueSegment> Read = (ctx, reader) => 
    {
      var content = RdContentSegments.Read(ctx, reader);
      var _result = new RdValueSegment(content);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdValueSegment> Write = (ctx, writer, value) => 
    {
      RdContentSegments.Write(ctx, writer, value.Content);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdValueSegment) obj);
    }
    public bool Equals(RdValueSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Content, other.Content);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Content.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdValueSegment (");
      using (printer.IndentCookie()) {
        printer.Print("content = "); Content.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:157</p>
  /// </summary>
  public enum RdVerticalAlignment {
    Center,
    Top,
    Bottom
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:184</p>
  /// </summary>
  public sealed class RdXmlDocCodeEntityReference : RdCodeEntityReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdXmlDocCodeEntityReference(
      [NotNull] string rawValue
    ) : base (
      rawValue
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdXmlDocCodeEntityReference> Read = (ctx, reader) => 
    {
      var rawValue = reader.ReadString();
      var _result = new RdXmlDocCodeEntityReference(rawValue);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdXmlDocCodeEntityReference> Write = (ctx, writer, value) => 
    {
      writer.Write(value.RawValue);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdXmlDocCodeEntityReference) obj);
    }
    public bool Equals(RdXmlDocCodeEntityReference other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return RawValue == other.RawValue;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + RawValue.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdXmlDocCodeEntityReference (");
      using (printer.IndentCookie()) {
        printer.Print("rawValue = "); RawValue.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
