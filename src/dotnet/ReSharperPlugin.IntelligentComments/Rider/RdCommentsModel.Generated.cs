//------------------------------------------------------------------------------
// <auto-generated>
//     This code was generated by a RdGen v1.07.
//
//     Changes to this file may cause incorrect behavior and will be lost if
//     the code is regenerated.
// </auto-generated>
//------------------------------------------------------------------------------
using System;
using System.Linq;
using System.Collections.Generic;
using System.Runtime.InteropServices;
using JetBrains.Annotations;

using JetBrains.Core;
using JetBrains.Diagnostics;
using JetBrains.Collections;
using JetBrains.Collections.Viewable;
using JetBrains.Lifetimes;
using JetBrains.Serialization;
using JetBrains.Rd;
using JetBrains.Rd.Base;
using JetBrains.Rd.Impl;
using JetBrains.Rd.Tasks;
using JetBrains.Rd.Util;
using JetBrains.Rd.Text;


// ReSharper disable RedundantEmptyObjectCreationArgumentList
// ReSharper disable InconsistentNaming
// ReSharper disable RedundantOverflowCheckingContext


namespace JetBrains.Rider.Model
{
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:7</p>
  /// </summary>
  public class RdCommentsModel : RdExtBase
  {
    //fields
    //public fields
    [NotNull] public IViewableMap<RdDocumentId, RdDocumentCommentsModel> Documents => _Documents;
    [NotNull] public IRdEndpoint<int, bool> Evaluate => _Evaluate;
    
    //private fields
    [NotNull] private readonly RdMap<RdDocumentId, RdDocumentCommentsModel> _Documents;
    [NotNull] private readonly RdCall<int, bool> _Evaluate;
    
    //primary constructor
    private RdCommentsModel(
      [NotNull] RdMap<RdDocumentId, RdDocumentCommentsModel> documents,
      [NotNull] RdCall<int, bool> evaluate
    )
    {
      if (documents == null) throw new ArgumentNullException("documents");
      if (evaluate == null) throw new ArgumentNullException("evaluate");
      
      _Documents = documents;
      _Evaluate = evaluate;
      BindableChildren.Add(new KeyValuePair<string, object>("documents", _Documents));
      BindableChildren.Add(new KeyValuePair<string, object>("evaluate", _Evaluate));
    }
    //secondary constructor
    internal RdCommentsModel (
    ) : this (
      new RdMap<RdDocumentId, RdDocumentCommentsModel>(RdDocumentId.Read, RdDocumentId.Write, RdDocumentCommentsModel.Read, RdDocumentCommentsModel.Write),
      new RdCall<int, bool>(JetBrains.Rd.Impl.Serializers.ReadInt, JetBrains.Rd.Impl.Serializers.WriteInt, JetBrains.Rd.Impl.Serializers.ReadBool, JetBrains.Rd.Impl.Serializers.WriteBool)
    ) {}
    //deconstruct trait
    //statics
    
    
    
    protected override long SerializationHash => 2051931797146116882L;
    
    protected override Action<ISerializers> Register => RegisterDeclaredTypesSerializers;
    public static void RegisterDeclaredTypesSerializers(ISerializers serializers)
    {
      serializers.Register(RdIntelligentComment.Read, RdIntelligentComment.Write);
      serializers.Register(RdTextSegment.Read, RdTextSegment.Write);
      serializers.Register(RdTextInvariant.Read, RdTextInvariant.Write);
      serializers.Register(RdDependencyReference.Read, RdDependencyReference.Write);
      serializers.Register(RdUnderlineTextAnimation.Read, RdUnderlineTextAnimation.Write);
      serializers.Register(RdComment_Unknown.Read, RdComment_Unknown.Write);
      serializers.Register(RdContentSegment_Unknown.Read, RdContentSegment_Unknown.Write);
      serializers.Register(RdInvariant_Unknown.Read, RdInvariant_Unknown.Write);
      serializers.Register(RdReference_Unknown.Read, RdReference_Unknown.Write);
      serializers.Register(RdFileBasedReference_Unknown.Read, RdFileBasedReference_Unknown.Write);
      serializers.Register(RdTextAnimation_Unknown.Read, RdTextAnimation_Unknown.Write);
      
      serializers.RegisterToplevelOnce(typeof(IdeRoot), IdeRoot.RegisterDeclaredTypesSerializers);
    }
    
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdCommentsModel (");
      using (printer.IndentCookie()) {
        printer.Print("documents = "); _Documents.PrintEx(printer); printer.Println();
        printer.Print("evaluate = "); _Evaluate.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  public static class SolutionRdCommentsModelEx
   {
    public static RdCommentsModel GetRdCommentsModel(this Solution solution)
    {
      return solution.GetOrCreateExtension("rdCommentsModel", () => new RdCommentsModel());
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:84</p>
  /// </summary>
  public sealed class RdBackgroundStyle : IPrintable, IEquatable<RdBackgroundStyle>
  {
    //fields
    //public fields
    [NotNull] public RdColor BackgroundColor {get; private set;}
    public bool RoundedRect {get; private set;}
    
    //private fields
    //primary constructor
    public RdBackgroundStyle(
      [NotNull] RdColor backgroundColor,
      bool roundedRect
    )
    {
      if (backgroundColor == null) throw new ArgumentNullException("backgroundColor");
      
      BackgroundColor = backgroundColor;
      RoundedRect = roundedRect;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out RdColor backgroundColor, out bool roundedRect)
    {
      backgroundColor = BackgroundColor;
      roundedRect = RoundedRect;
    }
    //statics
    
    public static CtxReadDelegate<RdBackgroundStyle> Read = (ctx, reader) => 
    {
      var backgroundColor = RdColor.Read(ctx, reader);
      var roundedRect = reader.ReadBool();
      var _result = new RdBackgroundStyle(backgroundColor, roundedRect);
      return _result;
    };
    
    public static CtxWriteDelegate<RdBackgroundStyle> Write = (ctx, writer, value) => 
    {
      RdColor.Write(ctx, writer, value.BackgroundColor);
      writer.Write(value.RoundedRect);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdBackgroundStyle) obj);
    }
    public bool Equals(RdBackgroundStyle other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(BackgroundColor, other.BackgroundColor) && RoundedRect == other.RoundedRect;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + BackgroundColor.GetHashCode();
        hash = hash * 31 + RoundedRect.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdBackgroundStyle (");
      using (printer.IndentCookie()) {
        printer.Print("backgroundColor = "); BackgroundColor.PrintEx(printer); printer.Println();
        printer.Print("roundedRect = "); RoundedRect.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:89</p>
  /// </summary>
  public sealed class RdColor : IPrintable, IEquatable<RdColor>
  {
    //fields
    //public fields
    [NotNull] public string Hex {get; private set;}
    
    //private fields
    //primary constructor
    public RdColor(
      [NotNull] string hex
    )
    {
      if (hex == null) throw new ArgumentNullException("hex");
      
      Hex = hex;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string hex)
    {
      hex = Hex;
    }
    //statics
    
    public static CtxReadDelegate<RdColor> Read = (ctx, reader) => 
    {
      var hex = reader.ReadString();
      var _result = new RdColor(hex);
      return _result;
    };
    
    public static CtxWriteDelegate<RdColor> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Hex);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdColor) obj);
    }
    public bool Equals(RdColor other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Hex == other.Hex;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Hex.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdColor (");
      using (printer.IndentCookie()) {
        printer.Print("hex = "); Hex.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:12</p>
  /// </summary>
  public abstract class RdComment : RdBindableBase
  {
    //fields
    //public fields
    public int Offset {get; private set;}
    [NotNull] public RdDocumentId DocumentId {get; private set;}
    
    //private fields
    //primary constructor
    protected RdComment(
      int offset,
      [NotNull] RdDocumentId documentId
    )
    {
      if (documentId == null) throw new ArgumentNullException("documentId");
      
      Offset = offset;
      DocumentId = documentId;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdComment> Read = Polymorphic<RdComment>.ReadAbstract(RdComment_Unknown.Read);
    
    public static CtxWriteDelegate<RdComment> Write = Polymorphic<RdComment>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdComment_Unknown : RdComment
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdComment_Unknown(
      int offset,
      [NotNull] RdDocumentId documentId
    ) : base (
      offset,
      documentId
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdComment_Unknown> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var offset = reader.ReadInt();
      var documentId = RdDocumentId.Read(ctx, reader);
      var _result = new RdComment_Unknown(offset, documentId).WithId(_id);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdComment_Unknown> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      writer.Write(value.Offset);
      RdDocumentId.Write(ctx, writer, value.DocumentId);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdComment_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("offset = "); Offset.PrintEx(printer); printer.Println();
        printer.Print("documentId = "); DocumentId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:35</p>
  /// </summary>
  public abstract class RdContentSegment{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdContentSegment> Read = Polymorphic<RdContentSegment>.ReadAbstract(RdContentSegment_Unknown.Read);
    
    public static CtxWriteDelegate<RdContentSegment> Write = Polymorphic<RdContentSegment>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdContentSegment_Unknown : RdContentSegment
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdContentSegment_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdContentSegment_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdContentSegment_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdContentSegment_Unknown) obj);
    }
    public bool Equals(RdContentSegment_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdContentSegment_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:59</p>
  /// </summary>
  public sealed class RdDependencyReference : RdFileBasedReference
  {
    //fields
    //public fields
    [NotNull] public string ReferenceName {get; private set;}
    [NotNull] public string DependencyDescription {get; private set;}
    
    //private fields
    //primary constructor
    public RdDependencyReference(
      [NotNull] string referenceName,
      [NotNull] string dependencyDescription,
      [NotNull] string filePath
    ) : base (
      filePath
     ) 
    {
      if (referenceName == null) throw new ArgumentNullException("referenceName");
      if (dependencyDescription == null) throw new ArgumentNullException("dependencyDescription");
      
      ReferenceName = referenceName;
      DependencyDescription = dependencyDescription;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdDependencyReference> Read = (ctx, reader) => 
    {
      var filePath = reader.ReadString();
      var referenceName = reader.ReadString();
      var dependencyDescription = reader.ReadString();
      var _result = new RdDependencyReference(referenceName, dependencyDescription, filePath);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdDependencyReference> Write = (ctx, writer, value) => 
    {
      writer.Write(value.FilePath);
      writer.Write(value.ReferenceName);
      writer.Write(value.DependencyDescription);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdDependencyReference) obj);
    }
    public bool Equals(RdDependencyReference other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return ReferenceName == other.ReferenceName && DependencyDescription == other.DependencyDescription && FilePath == other.FilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + ReferenceName.GetHashCode();
        hash = hash * 31 + DependencyDescription.GetHashCode();
        hash = hash * 31 + FilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdDependencyReference (");
      using (printer.IndentCookie()) {
        printer.Print("referenceName = "); ReferenceName.PrintEx(printer); printer.Println();
        printer.Print("dependencyDescription = "); DependencyDescription.PrintEx(printer); printer.Println();
        printer.Print("filePath = "); FilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:8</p>
  /// </summary>
  public sealed class RdDocumentCommentsModel : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableList<RdComment> Comments => _Comments;
    
    //private fields
    [NotNull] private readonly RdList<RdComment> _Comments;
    
    //primary constructor
    private RdDocumentCommentsModel(
      [NotNull] RdList<RdComment> comments
    )
    {
      if (comments == null) throw new ArgumentNullException("comments");
      
      _Comments = comments;
      BindableChildren.Add(new KeyValuePair<string, object>("comments", _Comments));
    }
    //secondary constructor
    public RdDocumentCommentsModel (
    ) : this (
      new RdList<RdComment>(RdComment.Read, RdComment.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdDocumentCommentsModel> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var comments = RdList<RdComment>.Read(ctx, reader, RdComment.Read, RdComment.Write);
      var _result = new RdDocumentCommentsModel(comments).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<RdDocumentCommentsModel> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdList<RdComment>.Write(ctx, writer, value._Comments);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdDocumentCommentsModel (");
      using (printer.IndentCookie()) {
        printer.Print("comments = "); _Comments.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:55</p>
  /// </summary>
  public abstract class RdFileBasedReference : RdReference
  {
    //fields
    //public fields
    [NotNull] public string FilePath {get; private set;}
    
    //private fields
    //primary constructor
    protected RdFileBasedReference(
      [NotNull] string filePath
    )
    {
      if (filePath == null) throw new ArgumentNullException("filePath");
      
      FilePath = filePath;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdFileBasedReference> Read = Polymorphic<RdFileBasedReference>.ReadAbstract(RdFileBasedReference_Unknown.Read);
    
    public static new CtxWriteDelegate<RdFileBasedReference> Write = Polymorphic<RdFileBasedReference>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdFileBasedReference_Unknown : RdFileBasedReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    public RdFileBasedReference_Unknown(
      [NotNull] string filePath
    ) : base (
      filePath
     ) 
    {
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdFileBasedReference_Unknown> Read = (ctx, reader) => 
    {
      var filePath = reader.ReadString();
      var _result = new RdFileBasedReference_Unknown(filePath);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdFileBasedReference_Unknown> Write = (ctx, writer, value) => 
    {
      writer.Write(value.FilePath);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdFileBasedReference_Unknown) obj);
    }
    public bool Equals(RdFileBasedReference_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return FilePath == other.FilePath;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + FilePath.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdFileBasedReference_Unknown (");
      using (printer.IndentCookie()) {
        printer.Print("filePath = "); FilePath.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:101</p>
  /// </summary>
  public enum RdFontStyle {
    Regular,
    Bold
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:64</p>
  /// </summary>
  public sealed class RdHighlightedText : IPrintable, IEquatable<RdHighlightedText>
  {
    //fields
    //public fields
    [NotNull] public string Text {get; private set;}
    [CanBeNull] public List<RdTextHighlighter> Highlighters {get; private set;}
    
    //private fields
    //primary constructor
    public RdHighlightedText(
      [NotNull] string text,
      [CanBeNull] List<RdTextHighlighter> highlighters = null
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
      Highlighters = highlighters;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string text, [CanBeNull] out List<RdTextHighlighter> highlighters)
    {
      text = Text;
      highlighters = Highlighters;
    }
    //statics
    
    public static CtxReadDelegate<RdHighlightedText> Read = (ctx, reader) => 
    {
      var text = reader.ReadString();
      var highlighters = ReadRdTextHighlighterListNullable(ctx, reader);
      var _result = new RdHighlightedText(text, highlighters);
      return _result;
    };
    public static CtxReadDelegate<List<RdTextHighlighter>> ReadRdTextHighlighterListNullable = RdTextHighlighter.Read.List().NullableClass();
    
    public static CtxWriteDelegate<RdHighlightedText> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Text);
      WriteRdTextHighlighterListNullable(ctx, writer, value.Highlighters);
    };
    public static  CtxWriteDelegate<List<RdTextHighlighter>> WriteRdTextHighlighterListNullable = RdTextHighlighter.Write.List().NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdHighlightedText) obj);
    }
    public bool Equals(RdHighlightedText other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Text == other.Text && Equals(Highlighters, other.Highlighters);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        hash = hash * 31 + (Highlighters != null ? Highlighters.ContentHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdHighlightedText (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
        printer.Print("highlighters = "); Highlighters.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:17</p>
  /// </summary>
  public sealed class RdIntelligentComment : RdComment
  {
    //fields
    //public fields
    [NotNull] public IViewableList<RdIntelligentCommentAuthor> Authors => _Authors;
    [NotNull] public IViewableProperty<DateTime> Date => _Date;
    [NotNull] public IViewableProperty<RdIntelligentCommentContent> Content => _Content;
    [NotNull] public IViewableList<RdInvariant> Invariants => _Invariants;
    [NotNull] public IViewableList<RdReference> References => _References;
    
    //private fields
    [NotNull] private readonly RdList<RdIntelligentCommentAuthor> _Authors;
    [NotNull] private readonly RdProperty<DateTime> _Date;
    [NotNull] private readonly RdProperty<RdIntelligentCommentContent> _Content;
    [NotNull] private readonly RdList<RdInvariant> _Invariants;
    [NotNull] private readonly RdList<RdReference> _References;
    
    //primary constructor
    private RdIntelligentComment(
      [NotNull] RdList<RdIntelligentCommentAuthor> authors,
      [NotNull] RdProperty<DateTime> date,
      [NotNull] RdProperty<RdIntelligentCommentContent> content,
      [NotNull] RdList<RdInvariant> invariants,
      [NotNull] RdList<RdReference> references,
      int offset,
      [NotNull] RdDocumentId documentId
    ) : base (
      offset,
      documentId
     ) 
    {
      if (authors == null) throw new ArgumentNullException("authors");
      if (date == null) throw new ArgumentNullException("date");
      if (content == null) throw new ArgumentNullException("content");
      if (invariants == null) throw new ArgumentNullException("invariants");
      if (references == null) throw new ArgumentNullException("references");
      
      _Authors = authors;
      _Date = date;
      _Content = content;
      _Invariants = invariants;
      _References = references;
      _Authors.OptimizeNested = true;
      _Date.OptimizeNested = true;
      _Invariants.OptimizeNested = true;
      _References.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("authors", _Authors));
      BindableChildren.Add(new KeyValuePair<string, object>("date", _Date));
      BindableChildren.Add(new KeyValuePair<string, object>("content", _Content));
      BindableChildren.Add(new KeyValuePair<string, object>("invariants", _Invariants));
      BindableChildren.Add(new KeyValuePair<string, object>("references", _References));
    }
    //secondary constructor
    public RdIntelligentComment (
      int offset,
      [NotNull] RdDocumentId documentId
    ) : this (
      new RdList<RdIntelligentCommentAuthor>(RdIntelligentCommentAuthor.Read, RdIntelligentCommentAuthor.Write),
      new RdProperty<DateTime>(JetBrains.Rd.Impl.Serializers.ReadDateTime, JetBrains.Rd.Impl.Serializers.WriteDateTime),
      new RdProperty<RdIntelligentCommentContent>(RdIntelligentCommentContent.Read, RdIntelligentCommentContent.Write),
      new RdList<RdInvariant>(RdInvariant.Read, RdInvariant.Write),
      new RdList<RdReference>(RdReference.Read, RdReference.Write),
      offset,
      documentId
    ) {}
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdIntelligentComment> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var offset = reader.ReadInt();
      var documentId = RdDocumentId.Read(ctx, reader);
      var authors = RdList<RdIntelligentCommentAuthor>.Read(ctx, reader, RdIntelligentCommentAuthor.Read, RdIntelligentCommentAuthor.Write);
      var date = RdProperty<DateTime>.Read(ctx, reader, JetBrains.Rd.Impl.Serializers.ReadDateTime, JetBrains.Rd.Impl.Serializers.WriteDateTime);
      var content = RdProperty<RdIntelligentCommentContent>.Read(ctx, reader, RdIntelligentCommentContent.Read, RdIntelligentCommentContent.Write);
      var invariants = RdList<RdInvariant>.Read(ctx, reader, RdInvariant.Read, RdInvariant.Write);
      var references = RdList<RdReference>.Read(ctx, reader, RdReference.Read, RdReference.Write);
      var _result = new RdIntelligentComment(authors, date, content, invariants, references, offset, documentId).WithId(_id);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdIntelligentComment> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      writer.Write(value.Offset);
      RdDocumentId.Write(ctx, writer, value.DocumentId);
      RdList<RdIntelligentCommentAuthor>.Write(ctx, writer, value._Authors);
      RdProperty<DateTime>.Write(ctx, writer, value._Date);
      RdProperty<RdIntelligentCommentContent>.Write(ctx, writer, value._Content);
      RdList<RdInvariant>.Write(ctx, writer, value._Invariants);
      RdList<RdReference>.Write(ctx, writer, value._References);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdIntelligentComment (");
      using (printer.IndentCookie()) {
        printer.Print("authors = "); _Authors.PrintEx(printer); printer.Println();
        printer.Print("date = "); _Date.PrintEx(printer); printer.Println();
        printer.Print("content = "); _Content.PrintEx(printer); printer.Println();
        printer.Print("invariants = "); _Invariants.PrintEx(printer); printer.Println();
        printer.Print("references = "); _References.PrintEx(printer); printer.Println();
        printer.Print("offset = "); Offset.PrintEx(printer); printer.Println();
        printer.Print("documentId = "); DocumentId.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:26</p>
  /// </summary>
  public sealed class RdIntelligentCommentAuthor : IPrintable, IEquatable<RdIntelligentCommentAuthor>
  {
    //fields
    //public fields
    [NotNull] public string Name {get; private set;}
    public DateTime Date {get; private set;}
    
    //private fields
    //primary constructor
    public RdIntelligentCommentAuthor(
      [NotNull] string name,
      DateTime date
    )
    {
      if (name == null) throw new ArgumentNullException("name");
      
      Name = name;
      Date = date;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string name, out DateTime date)
    {
      name = Name;
      date = Date;
    }
    //statics
    
    public static CtxReadDelegate<RdIntelligentCommentAuthor> Read = (ctx, reader) => 
    {
      var name = reader.ReadString();
      var date = reader.ReadDateTime();
      var _result = new RdIntelligentCommentAuthor(name, date);
      return _result;
    };
    
    public static CtxWriteDelegate<RdIntelligentCommentAuthor> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Name);
      writer.Write(value.Date);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdIntelligentCommentAuthor) obj);
    }
    public bool Equals(RdIntelligentCommentAuthor other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Name == other.Name && Date == other.Date;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Name.GetHashCode();
        hash = hash * 31 + Date.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdIntelligentCommentAuthor (");
      using (printer.IndentCookie()) {
        printer.Print("name = "); Name.PrintEx(printer); printer.Println();
        printer.Print("date = "); Date.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:31</p>
  /// </summary>
  public sealed class RdIntelligentCommentContent : RdBindableBase
  {
    //fields
    //public fields
    [NotNull] public IViewableList<RdContentSegment> Segments => _Segments;
    
    //private fields
    [NotNull] private readonly RdList<RdContentSegment> _Segments;
    
    //primary constructor
    private RdIntelligentCommentContent(
      [NotNull] RdList<RdContentSegment> segments
    )
    {
      if (segments == null) throw new ArgumentNullException("segments");
      
      _Segments = segments;
      _Segments.OptimizeNested = true;
      BindableChildren.Add(new KeyValuePair<string, object>("segments", _Segments));
    }
    //secondary constructor
    public RdIntelligentCommentContent (
    ) : this (
      new RdList<RdContentSegment>(RdContentSegment.Read, RdContentSegment.Write)
    ) {}
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdIntelligentCommentContent> Read = (ctx, reader) => 
    {
      var _id = RdId.Read(reader);
      var segments = RdList<RdContentSegment>.Read(ctx, reader, RdContentSegment.Read, RdContentSegment.Write);
      var _result = new RdIntelligentCommentContent(segments).WithId(_id);
      return _result;
    };
    
    public static CtxWriteDelegate<RdIntelligentCommentContent> Write = (ctx, writer, value) => 
    {
      value.RdId.Write(writer);
      RdList<RdContentSegment>.Write(ctx, writer, value._Segments);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    public override void Print(PrettyPrinter printer)
    {
      printer.Println("RdIntelligentCommentContent (");
      using (printer.IndentCookie()) {
        printer.Print("segments = "); _Segments.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:42</p>
  /// </summary>
  public abstract class RdInvariant{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdInvariant> Read = Polymorphic<RdInvariant>.ReadAbstract(RdInvariant_Unknown.Read);
    
    public static CtxWriteDelegate<RdInvariant> Write = Polymorphic<RdInvariant>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdInvariant_Unknown : RdInvariant
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdInvariant_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdInvariant_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdInvariant_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdInvariant_Unknown) obj);
    }
    public bool Equals(RdInvariant_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdInvariant_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:51</p>
  /// </summary>
  public abstract class RdReference{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdReference> Read = Polymorphic<RdReference>.ReadAbstract(RdReference_Unknown.Read);
    
    public static CtxWriteDelegate<RdReference> Write = Polymorphic<RdReference>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdReference_Unknown : RdReference
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdReference_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdReference_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdReference_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdReference_Unknown) obj);
    }
    public bool Equals(RdReference_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdReference_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:93</p>
  /// </summary>
  public abstract class RdTextAnimation{
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static CtxReadDelegate<RdTextAnimation> Read = Polymorphic<RdTextAnimation>.ReadAbstract(RdTextAnimation_Unknown.Read);
    
    public static CtxWriteDelegate<RdTextAnimation> Write = Polymorphic<RdTextAnimation>.Write;
    
    //constants
    
    //custom body
    //methods
    //equals trait
    //hash code trait
    //pretty print
    //toString
  }
  
  
  public sealed class RdTextAnimation_Unknown : RdTextAnimation
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTextAnimation_Unknown> Read = (ctx, reader) => 
    {
      var _result = new RdTextAnimation_Unknown();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTextAnimation_Unknown> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextAnimation_Unknown) obj);
    }
    public bool Equals(RdTextAnimation_Unknown other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextAnimation_Unknown (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:78</p>
  /// </summary>
  public sealed class RdTextAttributes : IPrintable, IEquatable<RdTextAttributes>
  {
    //fields
    //public fields
    [CanBeNull] public RdFontStyle? FontStyle {get; private set;}
    [CanBeNull] public bool? Underline {get; private set;}
    [CanBeNull] public float? FontWeight {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextAttributes(
      [CanBeNull] RdFontStyle? fontStyle = null,
      [CanBeNull] bool? underline = null,
      [CanBeNull] float? fontWeight = null
    )
    {
      FontStyle = fontStyle;
      Underline = underline;
      FontWeight = fontWeight;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([CanBeNull] out RdFontStyle? fontStyle, [CanBeNull] out bool? underline, [CanBeNull] out float? fontWeight)
    {
      fontStyle = FontStyle;
      underline = Underline;
      fontWeight = FontWeight;
    }
    //statics
    
    public static CtxReadDelegate<RdTextAttributes> Read = (ctx, reader) => 
    {
      var fontStyle = ReadRdFontStyleNullable(ctx, reader);
      var underline = ReadBoolNullable(ctx, reader);
      var fontWeight = ReadFloatNullable(ctx, reader);
      var _result = new RdTextAttributes(fontStyle, underline, fontWeight);
      return _result;
    };
    public static CtxReadDelegate<RdFontStyle?> ReadRdFontStyleNullable = new CtxReadDelegate<RdFontStyle>(JetBrains.Rd.Impl.Serializers.ReadEnum<RdFontStyle>).NullableStruct();
    public static CtxReadDelegate<bool?> ReadBoolNullable = JetBrains.Rd.Impl.Serializers.ReadBool.NullableStruct();
    public static CtxReadDelegate<float?> ReadFloatNullable = JetBrains.Rd.Impl.Serializers.ReadFloat.NullableStruct();
    
    public static CtxWriteDelegate<RdTextAttributes> Write = (ctx, writer, value) => 
    {
      WriteRdFontStyleNullable(ctx, writer, value.FontStyle);
      WriteBoolNullable(ctx, writer, value.Underline);
      WriteFloatNullable(ctx, writer, value.FontWeight);
    };
    public static  CtxWriteDelegate<RdFontStyle?> WriteRdFontStyleNullable = new CtxWriteDelegate<RdFontStyle>(JetBrains.Rd.Impl.Serializers.WriteEnum<RdFontStyle>).NullableStruct();
    public static  CtxWriteDelegate<bool?> WriteBoolNullable = JetBrains.Rd.Impl.Serializers.WriteBool.NullableStruct();
    public static  CtxWriteDelegate<float?> WriteFloatNullable = JetBrains.Rd.Impl.Serializers.WriteFloat.NullableStruct();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextAttributes) obj);
    }
    public bool Equals(RdTextAttributes other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(FontStyle, other.FontStyle) && Equals(Underline, other.Underline) && Equals(FontWeight, other.FontWeight);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + (FontStyle != null ? (int) FontStyle : 0);
        hash = hash * 31 + (Underline != null ? Underline.GetHashCode() : 0);
        hash = hash * 31 + (FontWeight != null ? FontWeight.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextAttributes (");
      using (printer.IndentCookie()) {
        printer.Print("fontStyle = "); FontStyle.PrintEx(printer); printer.Println();
        printer.Print("underline = "); Underline.PrintEx(printer); printer.Println();
        printer.Print("fontWeight = "); FontWeight.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:69</p>
  /// </summary>
  public sealed class RdTextHighlighter : IPrintable, IEquatable<RdTextHighlighter>
  {
    //fields
    //public fields
    [NotNull] public string Key {get; private set;}
    public int StartOffset {get; private set;}
    public int EndOffset {get; private set;}
    [NotNull] public RdTextAttributes Attributes {get; private set;}
    [CanBeNull] public RdBackgroundStyle BackgroundStyle {get; private set;}
    [CanBeNull] public RdTextAnimation Animation {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextHighlighter(
      [NotNull] string key,
      int startOffset,
      int endOffset,
      [NotNull] RdTextAttributes attributes,
      [CanBeNull] RdBackgroundStyle backgroundStyle = null,
      [CanBeNull] RdTextAnimation animation = null
    )
    {
      if (key == null) throw new ArgumentNullException("key");
      if (attributes == null) throw new ArgumentNullException("attributes");
      
      Key = key;
      StartOffset = startOffset;
      EndOffset = endOffset;
      Attributes = attributes;
      BackgroundStyle = backgroundStyle;
      Animation = animation;
    }
    //secondary constructor
    //deconstruct trait
    public void Deconstruct([NotNull] out string key, out int startOffset, out int endOffset, [NotNull] out RdTextAttributes attributes, [CanBeNull] out RdBackgroundStyle backgroundStyle, [CanBeNull] out RdTextAnimation animation)
    {
      key = Key;
      startOffset = StartOffset;
      endOffset = EndOffset;
      attributes = Attributes;
      backgroundStyle = BackgroundStyle;
      animation = Animation;
    }
    //statics
    
    public static CtxReadDelegate<RdTextHighlighter> Read = (ctx, reader) => 
    {
      var key = reader.ReadString();
      var startOffset = reader.ReadInt();
      var endOffset = reader.ReadInt();
      var attributes = RdTextAttributes.Read(ctx, reader);
      var backgroundStyle = ReadRdBackgroundStyleNullable(ctx, reader);
      var animation = ReadRdTextAnimationNullable(ctx, reader);
      var _result = new RdTextHighlighter(key, startOffset, endOffset, attributes, backgroundStyle, animation);
      return _result;
    };
    public static CtxReadDelegate<RdBackgroundStyle> ReadRdBackgroundStyleNullable = RdBackgroundStyle.Read.NullableClass();
    public static CtxReadDelegate<RdTextAnimation> ReadRdTextAnimationNullable = RdTextAnimation.Read.NullableClass();
    
    public static CtxWriteDelegate<RdTextHighlighter> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Key);
      writer.Write(value.StartOffset);
      writer.Write(value.EndOffset);
      RdTextAttributes.Write(ctx, writer, value.Attributes);
      WriteRdBackgroundStyleNullable(ctx, writer, value.BackgroundStyle);
      WriteRdTextAnimationNullable(ctx, writer, value.Animation);
    };
    public static  CtxWriteDelegate<RdBackgroundStyle> WriteRdBackgroundStyleNullable = RdBackgroundStyle.Write.NullableClass();
    public static  CtxWriteDelegate<RdTextAnimation> WriteRdTextAnimationNullable = RdTextAnimation.Write.NullableClass();
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextHighlighter) obj);
    }
    public bool Equals(RdTextHighlighter other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Key == other.Key && StartOffset == other.StartOffset && EndOffset == other.EndOffset && Equals(Attributes, other.Attributes) && Equals(BackgroundStyle, other.BackgroundStyle) && Equals(Animation, other.Animation);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Key.GetHashCode();
        hash = hash * 31 + StartOffset.GetHashCode();
        hash = hash * 31 + EndOffset.GetHashCode();
        hash = hash * 31 + Attributes.GetHashCode();
        hash = hash * 31 + (BackgroundStyle != null ? BackgroundStyle.GetHashCode() : 0);
        hash = hash * 31 + (Animation != null ? Animation.GetHashCode() : 0);
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextHighlighter (");
      using (printer.IndentCookie()) {
        printer.Print("key = "); Key.PrintEx(printer); printer.Println();
        printer.Print("startOffset = "); StartOffset.PrintEx(printer); printer.Println();
        printer.Print("endOffset = "); EndOffset.PrintEx(printer); printer.Println();
        printer.Print("attributes = "); Attributes.PrintEx(printer); printer.Println();
        printer.Print("backgroundStyle = "); BackgroundStyle.PrintEx(printer); printer.Println();
        printer.Print("animation = "); Animation.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:46</p>
  /// </summary>
  public sealed class RdTextInvariant : RdInvariant
  {
    //fields
    //public fields
    [NotNull] public string Text {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextInvariant(
      [NotNull] string text
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTextInvariant> Read = (ctx, reader) => 
    {
      var text = reader.ReadString();
      var _result = new RdTextInvariant(text);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTextInvariant> Write = (ctx, writer, value) => 
    {
      writer.Write(value.Text);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextInvariant) obj);
    }
    public bool Equals(RdTextInvariant other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Text == other.Text;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextInvariant (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:38</p>
  /// </summary>
  public sealed class RdTextSegment : RdContentSegment
  {
    //fields
    //public fields
    [NotNull] public RdHighlightedText Text {get; private set;}
    
    //private fields
    //primary constructor
    public RdTextSegment(
      [NotNull] RdHighlightedText text
    )
    {
      if (text == null) throw new ArgumentNullException("text");
      
      Text = text;
    }
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdTextSegment> Read = (ctx, reader) => 
    {
      var text = RdHighlightedText.Read(ctx, reader);
      var _result = new RdTextSegment(text);
      return _result;
    };
    
    public static new CtxWriteDelegate<RdTextSegment> Write = (ctx, writer, value) => 
    {
      RdHighlightedText.Write(ctx, writer, value.Text);
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdTextSegment) obj);
    }
    public bool Equals(RdTextSegment other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return Equals(Text, other.Text);
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        hash = hash * 31 + Text.GetHashCode();
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdTextSegment (");
      using (printer.IndentCookie()) {
        printer.Print("text = "); Text.PrintEx(printer); printer.Println();
      }
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
  
  
  /// <summary>
  /// <p>Generated from: RdComment.kt:97</p>
  /// </summary>
  public sealed class RdUnderlineTextAnimation : RdTextAnimation
  {
    //fields
    //public fields
    
    //private fields
    //primary constructor
    //secondary constructor
    //deconstruct trait
    //statics
    
    public static new CtxReadDelegate<RdUnderlineTextAnimation> Read = (ctx, reader) => 
    {
      var _result = new RdUnderlineTextAnimation();
      return _result;
    };
    
    public static new CtxWriteDelegate<RdUnderlineTextAnimation> Write = (ctx, writer, value) => 
    {
    };
    
    //constants
    
    //custom body
    //methods
    //equals trait
    public override bool Equals(object obj)
    {
      if (ReferenceEquals(null, obj)) return false;
      if (ReferenceEquals(this, obj)) return true;
      if (obj.GetType() != GetType()) return false;
      return Equals((RdUnderlineTextAnimation) obj);
    }
    public bool Equals(RdUnderlineTextAnimation other)
    {
      if (ReferenceEquals(null, other)) return false;
      if (ReferenceEquals(this, other)) return true;
      return true;
    }
    //hash code trait
    public override int GetHashCode()
    {
      unchecked {
        var hash = 0;
        return hash;
      }
    }
    //pretty print
    public void Print(PrettyPrinter printer)
    {
      printer.Println("RdUnderlineTextAnimation (");
      printer.Print(")");
    }
    //toString
    public override string ToString()
    {
      var printer = new SingleLinePrettyPrinter();
      Print(printer);
      return printer.ToString();
    }
  }
}
