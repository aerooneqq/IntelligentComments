namespace TaggedLibrary
{
    |/*
        The main Math class
        Contains all methods for performing basic math functions
    */|(0)
        |/// <summary>
    /// The main <c>Math</c> class.
    /// Contains all methods for performing basic math functions.
    /// <list type="bullet">
    /// <item>
    /// <term>Add</term>
    /// <description>Addition Operation</description>
    /// </item>
    /// <item>
    /// <term>Subtract</term>
    /// <description>Subtraction Operation</description>
    /// </item>
    /// <item>
    /// <term>Multiply</term>
    /// <description>Multiplication Operation</description>
    /// </item>
    /// <item>
    /// <term>Divide</term>
    /// <description>Division Operation</description>
    /// </item>
    /// </list>
    /// </summary>
    /// <remarks>
    /// <para>
    /// This class can add, subtract, multiply and divide.
    /// </para>
    /// <para>
    /// These operations can be performed on both
    /// integers and doubles.
    /// </para>
    /// </remarks>|(1)
    public class Math
    {
        |// Adds two integers and returns the result|(2)
        |/// <summary>
        /// Adds two integers <paramref name="a"/> and <paramref name="b"/>
        ///  and returns the result.
        /// </summary>
        /// <returns>
        /// The sum of two integers.
        /// </returns>
        /// <example>
        /// <code>
        /// int c = Math.Add(4, 5);
        /// if (c > 10)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// <exception cref="System.OverflowException">
        /// Thrown when one parameter is <see cref="Int32.MaxValue"/> and the other
        /// is greater than 0.
        /// </exception>
        /// See <see cref="Math.Add(double, double)"/> to add doubles.
        /// <seealso cref="Math.Subtract(int, int)"/>
        /// <seealso cref="Math.Multiply(int, int)"/>
        /// <seealso cref="Math.Divide(int, int)"/>
        /// <param name="a">An integer.</param>
        /// <param name="b">An integer.</param>|(3)
        public static int Add(int a, int b)
        {
            |// If any parameter is equal to the max value of an integer
            // and the other is greater than zero|(4)
            if ((a == int.MaxValue && b > 0) || 
                (b == int.MaxValue && a > 0))
            {
                throw new System.OverflowException();
            }
            return a + b;
        }

        |// Adds two doubles and returns the result|(5)
        |/// <summary>
        /// Adds two doubles <paramref name="a"/> and <paramref name="b"/>
        /// and returns the result.
        /// </summary>
        /// <returns>
        /// The sum of two doubles.
        /// </returns>
        /// <example>
        /// <code>
        /// double c = Math.Add(4.5, 5.4);
        /// if (c > 10)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// <exception cref="System.OverflowException">
        /// Thrown when one parameter is max and the other
        /// is greater than 0.</exception>
        /// See <see cref="Math.Add(int, int)"/> to add integers.
        /// <seealso cref="Math.Subtract(double, double)"/>
        /// <seealso cref="Math.Multiply(double, double)"/>
        /// <seealso cref="Math.Divide(double, double)"/>
        /// <param name="a">A double precision number.</param>
        /// <param name="b">A double precision number.</param>|(6)
        public static double Add(double a, double b)
        {
            |// If any parameter is equal to the max value of an integer
            // and the other is greater than zero|(7)
            if ((a == double.MaxValue && b > 0) 
                || (b == double.MaxValue && a > 0))
            {
                throw new System.OverflowException();
            }

            return a + b;
        }

        |// Subtracts an integer from another and returns the result|(8)
        |/// <summary>
        /// Subtracts <paramref name="b"/> from <paramref name="a"/>
        /// and returns the result.
        /// </summary>
        /// <returns>
        /// The difference between two integers.
        /// </returns>
        /// <example>
        /// <code>
        /// int c = Math.Subtract(4, 5);
        /// if (c > 1)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// See <see cref="Math.Subtract(double, double)"/> to subtract doubles.
        /// <seealso cref="Math.Add(int, int)"/>
        /// <seealso cref="Math.Multiply(int, int)"/>
        /// <seealso cref="Math.Divide(int, int)"/>
        /// <param name="a">An integer.</param>
        /// <param name="b">An integer.</param>|(9)
        public static int Subtract(int a, int b)
        {
            return a - b;
        }

        |// Subtracts a double from another and returns the result|(10)
        |/// <summary>
        /// Subtracts a double <paramref name="b"/> from another 
        /// double <paramref name="a"/> and returns the result.
        /// </summary>
        /// <returns>
        /// The difference between two doubles.
        /// </returns>
        /// <example>
        /// <code>
        /// double c = Math.Subtract(4.5, 5.4);
        /// if (c > 1)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// See <see cref="Math.Subtract(int, int)"/> to subtract integers.
        /// <seealso cref="Math.Add(double, double)"/>
        /// <seealso cref="Math.Multiply(double, double)"/>
        /// <seealso cref="Math.Divide(double, double)"/>
        /// <param name="a">A double precision number.</param>
        /// <param name="b">A double precision number.</param>|(11)
        public static double Subtract(double a, double b)
        {
            return a - b;
        }

        |// Multiplies two integers and returns the result|(12)
        |/// <summary>
        /// Multiplies two integers <paramref name="a"/> 
        /// and <paramref name="b"/> and returns the result.
        /// </summary>
        /// <returns>
        /// The product of two integers.
        /// </returns>
        /// <example>
        /// <code>
        /// int c = Math.Multiply(4, 5);
        /// if (c > 100)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// See <see cref="Math.Multiply(double, double)"/> to multiply doubles.
        /// <seealso cref="Math.Add(int, int)"/>
        /// <seealso cref="Math.Subtract(int, int)"/>
        /// <seealso cref="Math.Divide(int, int)"/>
        /// <param name="a">An integer.</param>
        /// <param name="b">An integer.</param>|(13)
        public static int Multiply(int a, int b)
        {
            return a * b;
        }

        |// Multiplies two doubles and returns the result|(14)
        |/// <summary>
        /// Multiplies two doubles <paramref name="a"/> and
        /// <paramref name="b"/> and returns the result.
        /// </summary>
        /// <returns>
        /// The product of two doubles.
        /// </returns>
        /// <example>
        /// <code>
        /// double c = Math.Multiply(4.5, 5.4);
        /// if (c > 100.0)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// See <see cref="Math.Multiply(int, int)"/> to multiply integers.
        /// <seealso cref="Math.Add(double, double)"/>
        /// <seealso cref="Math.Subtract(double, double)"/>
        /// <seealso cref="Math.Divide(double, double)"/>
        /// <param name="a">A double precision number.</param>
        /// <param name="b">A double precision number.</param>|(15)
        public static double Multiply(double a, double b)
        {
            return a * b;
        }

        |// Divides an integer by another and returns the result|(16)
        |/// <summary>
        /// Divides an integer <paramref name="a"/> by another
        /// integer <paramref name="b"/> and returns the result.
        /// </summary>
        /// <returns>
        /// The quotient of two integers.
        /// </returns>
        /// <example>
        /// <code>
        /// int c = Math.Divide(4, 5);
        /// if (c > 1)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// <exception cref="System.DivideByZeroException">
        /// Thrown when <paramref name="b"/> is equal to 0.
        /// </exception>
        /// See <see cref="Math.Divide(double, double)"/> to divide doubles.
        /// <seealso cref="Math.Add(int, int)"/>
        /// <seealso cref="Math.Subtract(int, int)"/>
        /// <seealso cref="Math.Multiply(int, int)"/>
        /// <param name="a">An integer dividend.</param>
        /// <param name="b">An integer divisor.</param>|(17)
        public static int Divide(int a, int b)
        {
            return a / b;
        }

        |// Divides a double by another and returns the result|(18)
        |/// <summary>
        /// Divides a double <paramref name="a"/> by another double
        /// <paramref name="b"/> and returns the result.
        /// </summary>
        /// <returns>
        /// The quotient of two doubles.
        /// </returns>
        /// <example>
        /// <code>
        /// double c = Math.Divide(4.5, 5.4);
        /// if (c > 1.0)
        /// {
        ///     Console.WriteLine(c);
        /// }
        /// </code>
        /// </example>
        /// <exception cref="System.DivideByZeroException">
        /// Thrown when <paramref name="b"/> is equal to 0.
        /// </exception>
        /// See <see cref="Math.Divide(int, int)"/> to divide integers.
        /// <seealso cref="Math.Add(double, double)"/>
        /// <seealso cref="Math.Subtract(double, double)"/>
        /// <seealso cref="Math.Multiply(double, double)"/>
        /// <param name="a">A double precision dividend.</param>
        /// <param name="b">A double precision divisor.</param>|(19)
        public static double Divide(double a, double b)
        {
            return a / b;
        }
    }
}
---------------------------------------------------------
(0): IntelligentCommentsDocCommentFolding: (DocumentRange (32 - 137) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: The main Math class
    Contains all methods for performing basic math functions
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 76, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(1): IntelligentCommentsDocCommentFolding: (DocumentRange (147 - 1,056) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The main Math class.
              Contains all methods for performing basic math functions.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [doc.comment.c.element.text, 9, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 14, 78, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            List Bullet:
              Header:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Add
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Content:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Addition Operation
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Header:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Subtract
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Content:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Subtraction Operation
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Header:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Multiply
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Content:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Multiplication Operation
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Header:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Divide
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 6, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Content:
                  EntityWithContentSegments:
                    ContentSegments:
                      TextContentSegment:
                        HighlightedText:
                        Text: Division Operation
                        Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      RemarksContentSegment:
        ContentSegments:
            ParagraphContentSegment:
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: This class can add, subtract, multiply and divide.
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 50, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
            ParagraphContentSegment:
              ContentSegments:
                TextContentSegment:
                  HighlightedText:
                  Text: These operations can be performed on both
                    integers and doubles.
                  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 63, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(2): IntelligentCommentsDocCommentFolding: (DocumentRange (1,096 - 1,139) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Adds two integers and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 40, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(3): IntelligentCommentsDocCommentFolding: (DocumentRange (1,149 - 2,138) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Adds two integers a and band returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 17, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 18, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 20, 23, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 24, 25, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 25, 48, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The sum of two integers.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  int c = Math.Add(4, 5);
                  if (c > 10)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 22, 23, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 25, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 32, 34, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 40, 42, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      Exception:HighlightedText:
        Text: OverflowException
        Highlighters: Highlighter: [ReSharper.CSHARP_CLASS_IDENTIFIER, 0, 17, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::T:System.OverflowException, ]
        ExceptionContentSegment:
          ContentSegments:
            TextContentSegment:
              HighlightedText:
              Text: Thrown when one parameter is Int32.MaxValue and the other
                is greater than 0.
              Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [see.text, 29, 43, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 44, 76, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Double,System.Double)
    TextContentSegment:
      HighlightedText:
      Text: to add doubles.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 15, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Int32,System.Int32)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(4): IntelligentCommentsDocCommentFolding: (DocumentRange (2,208 - 2,318) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: If any parameter is equal to the max value of an integer
    and the other is greater than zero
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 91, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(5): IntelligentCommentsDocCommentFolding: (DocumentRange (2,550 - 2,592) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Adds two doubles and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 39, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(6): IntelligentCommentsDocCommentFolding: (DocumentRange (2,602 - 3,599) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Adds two doubles a and band returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 17, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 19, 22, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 23, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 24, 47, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The sum of two doubles.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 23, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  double c = Math.Add(4.5, 5.4);
                  if (c > 10)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 25, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 30, 33, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 39, 41, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 47, 49, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      Exception:HighlightedText:
        Text: OverflowException
        Highlighters: Highlighter: [ReSharper.CSHARP_CLASS_IDENTIFIER, 0, 17, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::T:System.OverflowException, ]
        ExceptionContentSegment:
          ContentSegments:
            TextContentSegment:
              HighlightedText:
              Text: Thrown when one parameter is max and the other
                is greater than 0.
              Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 65, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Int32,System.Int32)
    TextContentSegment:
      HighlightedText:
      Text: to add integers.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 22, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Double,System.Double)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision number.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision number.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(7): IntelligentCommentsDocCommentFolding: (DocumentRange (3,678 - 3,788) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: If any parameter is equal to the max value of an integer
    and the other is greater than zero
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 91, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(8): IntelligentCommentsDocCommentFolding: (DocumentRange (4,028 - 4,087) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Subtracts an integer from another and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 56, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(9): IntelligentCommentsDocCommentFolding: (DocumentRange (4,097 - 4,899) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Subtracts b from aand returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 9, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 10, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 12, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 17, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 18, 41, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The difference between two integers.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 36, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  int c = Math.Subtract(4, 5);
                  if (c > 1)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 27, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 30, 31, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 37, 39, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 45, 46, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Double,System.Double)
    TextContentSegment:
      HighlightedText:
      Text: to subtract doubles.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 20, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Int32,System.Int32)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(10): IntelligentCommentsDocCommentFolding: (DocumentRange (5,010 - 5,067) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Subtracts a double from another and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 54, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(11): IntelligentCommentsDocCommentFolding: (DocumentRange (5,077 - 5,953) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Subtracts a double b from another
              double a and returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 19, 20, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 21, 40, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 41, 42, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 43, 66, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The difference between two doubles.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 35, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  double c = Math.Subtract(4.5, 5.4);
                  if (c > 1)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 30, 33, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 35, 38, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 44, 46, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 52, 53, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32)
    TextContentSegment:
      HighlightedText:
      Text: to subtract integers.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 22, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Double,System.Double)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision number.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision number.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(12): IntelligentCommentsDocCommentFolding: (DocumentRange (6,073 - 6,122) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Multiplies two integers and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 46, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(13): IntelligentCommentsDocCommentFolding: (DocumentRange (6,132 - 6,942) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Multiplies two integers a and b and returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 23, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 24, 25, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 26, 29, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 30, 31, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 32, 55, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The product of two integers.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  int c = Math.Multiply(4, 5);
                  if (c > 100)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 27, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 30, 31, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 37, 39, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 45, 48, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Double,System.Double)
    TextContentSegment:
      HighlightedText:
      Text: to multiply doubles.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 20, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Int32,System.Int32)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(14): IntelligentCommentsDocCommentFolding: (DocumentRange (7,053 - 7,101) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Multiplies two doubles and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 45, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(15): IntelligentCommentsDocCommentFolding: (DocumentRange (7,111 - 7,970) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Multiplies two doubles a and b and returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 22, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 23, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 25, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 29, 30, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 31, 54, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The product of two doubles.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 27, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  double c = Math.Multiply(4.5, 5.4);
                  if (c > 100.0)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 30, 33, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 35, 38, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 44, 46, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 52, 57, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32)
    TextContentSegment:
      HighlightedText:
      Text: to multiply integers.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 22, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Double,System.Double)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision number.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision number.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(16): IntelligentCommentsDocCommentFolding: (DocumentRange (8,090 - 8,145) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Divides an integer by another and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 52, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(17): IntelligentCommentsDocCommentFolding: (DocumentRange (8,155 - 9,134) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Divides an integer a by another
              integer b and returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 19, 20, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 21, 39, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 40, 41, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 42, 65, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The quotient of two integers.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 29, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  int c = Math.Divide(4, 5);
                  if (c > 1)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 8, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 25, 26, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 28, 29, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 35, 37, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 43, 44, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      Exception:HighlightedText:
        Text: DivideByZeroException
        Highlighters: Highlighter: [ReSharper.CSHARP_CLASS_IDENTIFIER, 0, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::T:System.DivideByZeroException, ]
        ExceptionContentSegment:
          ContentSegments:
            TextContentSegment:
              HighlightedText:
              Text: Thrown when b is equal to 0.
              Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 12, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 14, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 22, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Double,System.Double)
    TextContentSegment:
      HighlightedText:
      Text: to divide doubles.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Int32,System.Int32)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Int32,System.Int32)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer dividend.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 20, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: An integer divisor.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(18): IntelligentCommentsDocCommentFolding: (DocumentRange (9,243 - 9,296) on 4.cs)
TextContentSegment:
  HighlightedText:
  Text: Divides a double by another and returns the result
  Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 50, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

(19): IntelligentCommentsDocCommentFolding: (DocumentRange (9,306 - 10,319) on 4.cs)
IntelligentCommentContent:
  ContentSegments:
      SummaryContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: Divides a double a by another double b and returns the result.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 17, 18, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 19, 36, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 37, 38, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
              Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 39, 62, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ReturnContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: The quotient of two doubles.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ExampleContentSegment:
        ContentSegments:
          Code Segment: 
              HighlightedText:
              Text: {
                  double c = Math.Divide(4.5, 5.4);
                  if (c > 1.0)
                  {
                    Console.WriteLine(c);
                  }
                }
              Highlighters: Highlighter: [ReSharper.CSHARP_KEYWORD, 5, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 28, 31, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 33, 36, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_KEYWORD, 42, 44, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_NUMBER, 50, 53, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      Exception:HighlightedText:
        Text: DivideByZeroException
        Highlighters: Highlighter: [ReSharper.CSHARP_CLASS_IDENTIFIER, 0, 21, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::T:System.DivideByZeroException, ]
        ExceptionContentSegment:
          ContentSegments:
            TextContentSegment:
              HighlightedText:
              Text: Thrown when b is equal to 0.
              Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 11, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_PARAMETER_IDENTIFIER, 12, 13, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
                Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 14, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
    TextContentSegment:
      HighlightedText:
      Text: See
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 3, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Divide(int, int) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 16, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Divide(System.Int32,System.Int32), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Divide(System.Int32,System.Int32)
    TextContentSegment:
      HighlightedText:
      Text: to divide integers.
      Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Add(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 19, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Add(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Add(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Subtract(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Subtract(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Subtract(System.Double,System.Double)
      SeeAlsoMemberContentSegment:HighlightedText:
        Text: Multiply(double, double) 
        Highlighters: Highlighter: [ReSharper.CSHARP_STATIC_METHOD_IDENTIFIER, 0, 24, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ProxyDomainReference::M:TaggedLibrary.Math.Multiply(System.Double,System.Double), ]
        ProxyDomainReference with raw value: M:TaggedLibrary.Math.Multiply(System.Double,System.Double)
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision dividend.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 28, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]
      ParamContentSegment:
        ContentSegments:
          TextContentSegment:
            HighlightedText:
            Text: A double precision divisor.
            Highlighters: Highlighter: [ReSharper.CSHARP_DOC_COMMENT, 0, 27, TextHighlighterAttributes { FontStyle = Regular, Underline = False, FontWeight = 400 }, References: ]

